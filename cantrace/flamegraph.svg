<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="678" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="661.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="661.00"> </text><svg id="frames" x="10" width="1180" total_samples="3553"><g><title>&lt;cantracer::CanTracer as cannoli::Cannoli&gt;::exec (14 samples, 0.39%)</title><rect x="0.0000%" y="597" width="0.3940%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="14"/><text x="0.2500%" y="607.50"></text></g><g><title>&lt;cantracer::CanTracer as cannoli::Cannoli&gt;::write (1 samples, 0.03%)</title><rect x="0.3940%" y="597" width="0.0281%" height="15" fill="rgb(217,0,24)" fg:x="14" fg:w="1"/><text x="0.6440%" y="607.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (6 samples, 0.17%)</title><rect x="0.4222%" y="597" width="0.1689%" height="15" fill="rgb(221,193,54)" fg:x="15" fg:w="6"/><text x="0.6722%" y="607.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (5 samples, 0.14%)</title><rect x="0.5910%" y="597" width="0.1407%" height="15" fill="rgb(248,212,6)" fg:x="21" fg:w="5"/><text x="0.8410%" y="607.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (12 samples, 0.34%)</title><rect x="0.7318%" y="597" width="0.3377%" height="15" fill="rgb(208,68,35)" fg:x="26" fg:w="12"/><text x="0.9818%" y="607.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (11 samples, 0.31%)</title><rect x="1.0695%" y="597" width="0.3096%" height="15" fill="rgb(232,128,0)" fg:x="38" fg:w="11"/><text x="1.3195%" y="607.50"></text></g><g><title>&lt;yaxpeax_arch::annotation::NullSink as yaxpeax_arch::annotation::DescriptionSink&lt;T&gt;&gt;::record (1 samples, 0.03%)</title><rect x="1.3791%" y="597" width="0.0281%" height="15" fill="rgb(207,160,47)" fg:x="49" fg:w="1"/><text x="1.6291%" y="607.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.03%)</title><rect x="1.4073%" y="581" width="0.0281%" height="15" fill="rgb(228,23,34)" fg:x="50" fg:w="1"/><text x="1.6573%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::ne (1 samples, 0.03%)</title><rect x="1.4354%" y="581" width="0.0281%" height="15" fill="rgb(218,30,26)" fg:x="51" fg:w="1"/><text x="1.6854%" y="591.50"></text></g><g><title>core::cmp::PartialEq::ne (1 samples, 0.03%)</title><rect x="1.4354%" y="565" width="0.0281%" height="15" fill="rgb(220,122,19)" fg:x="51" fg:w="1"/><text x="1.6854%" y="575.50"></text></g><g><title>&lt;yaxpeax_x86::long_mode::InstDecoder as core::cmp::PartialEq&gt;::eq (1 samples, 0.03%)</title><rect x="1.4354%" y="549" width="0.0281%" height="15" fill="rgb(250,228,42)" fg:x="51" fg:w="1"/><text x="1.6854%" y="559.50"></text></g><g><title>yaxpeax_x86::long_mode::Instruction::invalid (1 samples, 0.03%)</title><rect x="1.4636%" y="581" width="0.0281%" height="15" fill="rgb(240,193,28)" fg:x="52" fg:w="1"/><text x="1.7136%" y="591.50"></text></g><g><title>yaxpeax_x86::long_mode::Prefixes::new (1 samples, 0.03%)</title><rect x="1.4636%" y="565" width="0.0281%" height="15" fill="rgb(216,20,37)" fg:x="52" fg:w="1"/><text x="1.7136%" y="575.50"></text></g><g><title>&lt;yaxpeax_arch::reader::U8Reader as yaxpeax_arch::reader::Reader&lt;u64,u8&gt;&gt;::next (2 samples, 0.06%)</title><rect x="1.5480%" y="565" width="0.0563%" height="15" fill="rgb(206,188,39)" fg:x="55" fg:w="2"/><text x="1.7980%" y="575.50"></text></g><g><title>&lt;yaxpeax_arch::reader::U8Reader as yaxpeax_arch::reader::Reader&lt;u64,u8&gt;&gt;::next::{{closure}} (1 samples, 0.03%)</title><rect x="1.5761%" y="549" width="0.0281%" height="15" fill="rgb(217,207,13)" fg:x="56" fg:w="1"/><text x="1.8261%" y="559.50"></text></g><g><title>&lt;yaxpeax_arch::reader::U8Reader as yaxpeax_arch::reader::Reader&lt;u64,u8&gt;&gt;::offset (2 samples, 0.06%)</title><rect x="1.6043%" y="565" width="0.0563%" height="15" fill="rgb(231,73,38)" fg:x="57" fg:w="2"/><text x="1.8543%" y="575.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.03%)</title><rect x="1.6606%" y="565" width="0.0281%" height="15" fill="rgb(225,20,46)" fg:x="59" fg:w="1"/><text x="1.9106%" y="575.50"></text></g><g><title>core::cmp::PartialEq::ne (1 samples, 0.03%)</title><rect x="1.6887%" y="565" width="0.0281%" height="15" fill="rgb(210,31,41)" fg:x="60" fg:w="1"/><text x="1.9387%" y="575.50"></text></g><g><title>core::ptr::read_volatile (2 samples, 0.06%)</title><rect x="1.7169%" y="565" width="0.0563%" height="15" fill="rgb(221,200,47)" fg:x="61" fg:w="2"/><text x="1.9669%" y="575.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="1.9420%" y="549" width="0.0281%" height="15" fill="rgb(226,26,5)" fg:x="69" fg:w="1"/><text x="2.1920%" y="559.50"></text></g><g><title>&lt;yaxpeax_arch::annotation::NullSink as yaxpeax_arch::annotation::DescriptionSink&lt;T&gt;&gt;::record (1 samples, 0.03%)</title><rect x="1.9702%" y="549" width="0.0281%" height="15" fill="rgb(249,33,26)" fg:x="70" fg:w="1"/><text x="2.2202%" y="559.50"></text></g><g><title>yaxpeax_x86::long_mode::InnerDescription::with_id (1 samples, 0.03%)</title><rect x="1.9983%" y="549" width="0.0281%" height="15" fill="rgb(235,183,28)" fg:x="71" fg:w="1"/><text x="2.2483%" y="559.50"></text></g><g><title>yaxpeax_x86::long_mode::OperandCodeBuilder::has_reg_mem (1 samples, 0.03%)</title><rect x="2.0265%" y="549" width="0.0281%" height="15" fill="rgb(221,5,38)" fg:x="72" fg:w="1"/><text x="2.2765%" y="559.50"></text></g><g><title>yaxpeax_x86::long_mode::OperandCodeBuilder::is_only_modrm_operands (1 samples, 0.03%)</title><rect x="2.0546%" y="549" width="0.0281%" height="15" fill="rgb(247,18,42)" fg:x="73" fg:w="1"/><text x="2.3046%" y="559.50"></text></g><g><title>yaxpeax_x86::long_mode::read_E (1 samples, 0.03%)</title><rect x="2.0827%" y="549" width="0.0281%" height="15" fill="rgb(241,131,45)" fg:x="74" fg:w="1"/><text x="2.3327%" y="559.50"></text></g><g><title>yaxpeax_x86::long_mode::read_M (1 samples, 0.03%)</title><rect x="2.0827%" y="533" width="0.0281%" height="15" fill="rgb(249,31,29)" fg:x="74" fg:w="1"/><text x="2.3327%" y="543.50"></text></g><g><title>yaxpeax_x86::long_mode::InnerDescription::with_id (1 samples, 0.03%)</title><rect x="2.0827%" y="517" width="0.0281%" height="15" fill="rgb(225,111,53)" fg:x="74" fg:w="1"/><text x="2.3327%" y="527.50"></text></g><g><title>yaxpeax_x86::long_mode::InnerDescription::with_id (2 samples, 0.06%)</title><rect x="2.1390%" y="533" width="0.0563%" height="15" fill="rgb(238,160,17)" fg:x="76" fg:w="2"/><text x="2.3890%" y="543.50"></text></g><g><title>yaxpeax_x86::long_mode::read_M (4 samples, 0.11%)</title><rect x="2.1109%" y="549" width="0.1126%" height="15" fill="rgb(214,148,48)" fg:x="75" fg:w="4"/><text x="2.3609%" y="559.50"></text></g><g><title>yaxpeax_x86::long_mode::read_num (1 samples, 0.03%)</title><rect x="2.1953%" y="533" width="0.0281%" height="15" fill="rgb(232,36,49)" fg:x="78" fg:w="1"/><text x="2.4453%" y="543.50"></text></g><g><title>&lt;yaxpeax_arch::reader::U8Reader as yaxpeax_arch::reader::Reader&lt;u64,u8&gt;&gt;::next (1 samples, 0.03%)</title><rect x="2.1953%" y="517" width="0.0281%" height="15" fill="rgb(209,103,24)" fg:x="78" fg:w="1"/><text x="2.4453%" y="527.50"></text></g><g><title>&lt;yaxpeax_arch::reader::U8Reader as yaxpeax_arch::reader::Reader&lt;u64,u8&gt;&gt;::next::{{closure}} (1 samples, 0.03%)</title><rect x="2.1953%" y="501" width="0.0281%" height="15" fill="rgb(229,88,8)" fg:x="78" fg:w="1"/><text x="2.4453%" y="511.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="2.1953%" y="485" width="0.0281%" height="15" fill="rgb(213,181,19)" fg:x="78" fg:w="1"/><text x="2.4453%" y="495.50"></text></g><g><title>yaxpeax_x86::long_mode::read_imm_signed (2 samples, 0.06%)</title><rect x="2.2235%" y="549" width="0.0563%" height="15" fill="rgb(254,191,54)" fg:x="79" fg:w="2"/><text x="2.4735%" y="559.50"></text></g><g><title>yaxpeax_x86::long_mode::read_num (2 samples, 0.06%)</title><rect x="2.2235%" y="533" width="0.0563%" height="15" fill="rgb(241,83,37)" fg:x="79" fg:w="2"/><text x="2.4735%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (1 samples, 0.03%)</title><rect x="2.2516%" y="517" width="0.0281%" height="15" fill="rgb(233,36,39)" fg:x="80" fg:w="1"/><text x="2.5016%" y="527.50"></text></g><g><title>&lt;yaxpeax_x86::long_mode::InstDecoder as yaxpeax_arch::Decoder&lt;yaxpeax_x86::long_mode::Arch&gt;&gt;::decode (32 samples, 0.90%)</title><rect x="1.4073%" y="597" width="0.9006%" height="15" fill="rgb(226,3,54)" fg:x="50" fg:w="32"/><text x="1.6573%" y="607.50"></text></g><g><title>yaxpeax_x86::long_mode::read_with_annotations (29 samples, 0.82%)</title><rect x="1.4917%" y="581" width="0.8162%" height="15" fill="rgb(245,192,40)" fg:x="53" fg:w="29"/><text x="1.7417%" y="591.50"></text></g><g><title>yaxpeax_x86::long_mode::read_operands (19 samples, 0.53%)</title><rect x="1.7731%" y="565" width="0.5348%" height="15" fill="rgb(238,167,29)" fg:x="63" fg:w="19"/><text x="2.0231%" y="575.50"></text></g><g><title>yaxpeax_x86::long_mode::read_modrm (1 samples, 0.03%)</title><rect x="2.2798%" y="549" width="0.0281%" height="15" fill="rgb(232,182,51)" fg:x="81" fg:w="1"/><text x="2.5298%" y="559.50"></text></g><g><title>[cantracer] (1 samples, 0.03%)</title><rect x="2.3079%" y="597" width="0.0281%" height="15" fill="rgb(231,60,39)" fg:x="82" fg:w="1"/><text x="2.5579%" y="607.50"></text></g><g><title>yaxpeax_x86::long_mode::PrefixRex::w (1 samples, 0.03%)</title><rect x="2.3079%" y="581" width="0.0281%" height="15" fill="rgb(208,69,12)" fg:x="82" fg:w="1"/><text x="2.5579%" y="591.50"></text></g><g><title>&lt;cantracer::CanTracer as cannoli::Cannoli&gt;::exec (1 samples, 0.03%)</title><rect x="2.3361%" y="581" width="0.0281%" height="15" fill="rgb(235,93,37)" fg:x="83" fg:w="1"/><text x="2.5861%" y="591.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3 samples, 0.08%)</title><rect x="2.3642%" y="581" width="0.0844%" height="15" fill="rgb(213,116,39)" fg:x="84" fg:w="3"/><text x="2.6142%" y="591.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (6 samples, 0.17%)</title><rect x="2.4486%" y="581" width="0.1689%" height="15" fill="rgb(222,207,29)" fg:x="87" fg:w="6"/><text x="2.6986%" y="591.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (5 samples, 0.14%)</title><rect x="2.6175%" y="581" width="0.1407%" height="15" fill="rgb(206,96,30)" fg:x="93" fg:w="5"/><text x="2.8675%" y="591.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (10 samples, 0.28%)</title><rect x="2.7582%" y="581" width="0.2815%" height="15" fill="rgb(218,138,4)" fg:x="98" fg:w="10"/><text x="3.0082%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.03%)</title><rect x="3.0397%" y="581" width="0.0281%" height="15" fill="rgb(250,191,14)" fg:x="108" fg:w="1"/><text x="3.2897%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or_else (6 samples, 0.17%)</title><rect x="3.0678%" y="581" width="0.1689%" height="15" fill="rgb(239,60,40)" fg:x="109" fg:w="6"/><text x="3.3178%" y="591.50"></text></g><g><title>core::ptr::read_unaligned (10 samples, 0.28%)</title><rect x="3.2367%" y="581" width="0.2815%" height="15" fill="rgb(206,27,48)" fg:x="115" fg:w="10"/><text x="3.4867%" y="591.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (9 samples, 0.25%)</title><rect x="3.5182%" y="581" width="0.2533%" height="15" fill="rgb(225,35,8)" fg:x="125" fg:w="9"/><text x="3.7682%" y="591.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (3 samples, 0.08%)</title><rect x="3.7715%" y="581" width="0.0844%" height="15" fill="rgb(250,213,24)" fg:x="134" fg:w="3"/><text x="4.0215%" y="591.50"></text></g><g><title>[unknown] (55 samples, 1.55%)</title><rect x="2.3361%" y="597" width="1.5480%" height="15" fill="rgb(247,123,22)" fg:x="83" fg:w="55"/><text x="2.5861%" y="607.50"></text></g><g><title>mempipe::RecvPipe&lt;_,_&gt;::try_recv (1 samples, 0.03%)</title><rect x="3.8559%" y="581" width="0.0281%" height="15" fill="rgb(231,138,38)" fg:x="137" fg:w="1"/><text x="4.1059%" y="591.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.06%)</title><rect x="3.8840%" y="597" width="0.0563%" height="15" fill="rgb(231,145,46)" fg:x="138" fg:w="2"/><text x="4.1340%" y="607.50"></text></g><g><title>__rust_probestack (2 samples, 0.06%)</title><rect x="3.9403%" y="597" width="0.0563%" height="15" fill="rgb(251,118,11)" fg:x="140" fg:w="2"/><text x="4.1903%" y="607.50"></text></g><g><title>__rust_try (1 samples, 0.03%)</title><rect x="3.9966%" y="597" width="0.0281%" height="15" fill="rgb(217,147,25)" fg:x="142" fg:w="1"/><text x="4.2466%" y="607.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.03%)</title><rect x="3.9966%" y="581" width="0.0281%" height="15" fill="rgb(247,81,37)" fg:x="142" fg:w="1"/><text x="4.2466%" y="591.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.03%)</title><rect x="3.9966%" y="565" width="0.0281%" height="15" fill="rgb(209,12,38)" fg:x="142" fg:w="1"/><text x="4.2466%" y="575.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (1 samples, 0.03%)</title><rect x="3.9966%" y="549" width="0.0281%" height="15" fill="rgb(227,1,9)" fg:x="142" fg:w="1"/><text x="4.2466%" y="559.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.03%)</title><rect x="3.9966%" y="533" width="0.0281%" height="15" fill="rgb(248,47,43)" fg:x="142" fg:w="1"/><text x="4.2466%" y="543.50"></text></g><g><title>cannoli::handle_client::{{closure}}::{{closure}} (1 samples, 0.03%)</title><rect x="3.9966%" y="517" width="0.0281%" height="15" fill="rgb(221,10,30)" fg:x="142" fg:w="1"/><text x="4.2466%" y="527.50"></text></g><g><title>mempipe::RecvPipe&lt;_,_&gt;::try_recv (1 samples, 0.03%)</title><rect x="3.9966%" y="501" width="0.0281%" height="15" fill="rgb(210,229,1)" fg:x="142" fg:w="1"/><text x="4.2466%" y="511.50"></text></g><g><title>cannoli::handle_client::{{closure}}::{{closure}}::{{closure}} (1 samples, 0.03%)</title><rect x="3.9966%" y="485" width="0.0281%" height="15" fill="rgb(222,148,37)" fg:x="142" fg:w="1"/><text x="4.2466%" y="495.50"></text></g><g><title>cannoli::parse_payload (1 samples, 0.03%)</title><rect x="3.9966%" y="469" width="0.0281%" height="15" fill="rgb(234,67,33)" fg:x="142" fg:w="1"/><text x="4.2466%" y="479.50"></text></g><g><title>&lt;cantracer::CanTracer as cannoli::Cannoli&gt;::exec (1 samples, 0.03%)</title><rect x="3.9966%" y="453" width="0.0281%" height="15" fill="rgb(247,98,35)" fg:x="142" fg:w="1"/><text x="4.2466%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.03%)</title><rect x="3.9966%" y="437" width="0.0281%" height="15" fill="rgb(247,138,52)" fg:x="142" fg:w="1"/><text x="4.2466%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="3.9966%" y="421" width="0.0281%" height="15" fill="rgb(213,79,30)" fg:x="142" fg:w="1"/><text x="4.2466%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.03%)</title><rect x="3.9966%" y="405" width="0.0281%" height="15" fill="rgb(246,177,23)" fg:x="142" fg:w="1"/><text x="4.2466%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.03%)</title><rect x="3.9966%" y="389" width="0.0281%" height="15" fill="rgb(230,62,27)" fg:x="142" fg:w="1"/><text x="4.2466%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (1 samples, 0.03%)</title><rect x="3.9966%" y="373" width="0.0281%" height="15" fill="rgb(216,154,8)" fg:x="142" fg:w="1"/><text x="4.2466%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::guaranteed_eq (1 samples, 0.03%)</title><rect x="3.9966%" y="357" width="0.0281%" height="15" fill="rgb(244,35,45)" fg:x="142" fg:w="1"/><text x="4.2466%" y="367.50"></text></g><g><title>_start (1 samples, 0.03%)</title><rect x="4.0248%" y="597" width="0.0281%" height="15" fill="rgb(251,115,12)" fg:x="143" fg:w="1"/><text x="4.2748%" y="607.50"></text></g><g><title>_dl_start (1 samples, 0.03%)</title><rect x="4.0248%" y="581" width="0.0281%" height="15" fill="rgb(240,54,50)" fg:x="143" fg:w="1"/><text x="4.2748%" y="591.50"></text></g><g><title>_dl_start_final (1 samples, 0.03%)</title><rect x="4.0248%" y="565" width="0.0281%" height="15" fill="rgb(233,84,52)" fg:x="143" fg:w="1"/><text x="4.2748%" y="575.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.03%)</title><rect x="4.0248%" y="549" width="0.0281%" height="15" fill="rgb(207,117,47)" fg:x="143" fg:w="1"/><text x="4.2748%" y="559.50"></text></g><g><title>dl_main (1 samples, 0.03%)</title><rect x="4.0248%" y="533" width="0.0281%" height="15" fill="rgb(249,43,39)" fg:x="143" fg:w="1"/><text x="4.2748%" y="543.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.03%)</title><rect x="4.0248%" y="517" width="0.0281%" height="15" fill="rgb(209,38,44)" fg:x="143" fg:w="1"/><text x="4.2748%" y="527.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.03%)</title><rect x="4.0248%" y="501" width="0.0281%" height="15" fill="rgb(236,212,23)" fg:x="143" fg:w="1"/><text x="4.2748%" y="511.50"></text></g><g><title>do_lookup_x (1 samples, 0.03%)</title><rect x="4.0248%" y="485" width="0.0281%" height="15" fill="rgb(242,79,21)" fg:x="143" fg:w="1"/><text x="4.2748%" y="495.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="4.0529%" y="597" width="0.0281%" height="15" fill="rgb(211,96,35)" fg:x="144" fg:w="1"/><text x="4.3029%" y="607.50"></text></g><g><title>cannoli::Cannoli::read (2 samples, 0.06%)</title><rect x="4.0811%" y="597" width="0.0563%" height="15" fill="rgb(253,215,40)" fg:x="145" fg:w="2"/><text x="4.3311%" y="607.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.08%)</title><rect x="4.1655%" y="357" width="0.0844%" height="15" fill="rgb(211,81,21)" fg:x="148" fg:w="3"/><text x="4.4155%" y="367.50"></text></g><g><title>_int_malloc (2 samples, 0.06%)</title><rect x="4.1936%" y="341" width="0.0563%" height="15" fill="rgb(208,190,38)" fg:x="149" fg:w="2"/><text x="4.4436%" y="351.50"></text></g><g><title>cannoli::handle_client::{{closure}}::{{closure}} (5 samples, 0.14%)</title><rect x="4.1373%" y="597" width="0.1407%" height="15" fill="rgb(235,213,38)" fg:x="147" fg:w="5"/><text x="4.3873%" y="607.50"></text></g><g><title>mempipe::RecvPipe&lt;_,_&gt;::try_recv (5 samples, 0.14%)</title><rect x="4.1373%" y="581" width="0.1407%" height="15" fill="rgb(237,122,38)" fg:x="147" fg:w="5"/><text x="4.3873%" y="591.50"></text></g><g><title>cannoli::handle_client::{{closure}}::{{closure}}::{{closure}} (5 samples, 0.14%)</title><rect x="4.1373%" y="565" width="0.1407%" height="15" fill="rgb(244,218,35)" fg:x="147" fg:w="5"/><text x="4.3873%" y="575.50"></text></g><g><title>cannoli::parse_payload (5 samples, 0.14%)</title><rect x="4.1373%" y="549" width="0.1407%" height="15" fill="rgb(240,68,47)" fg:x="147" fg:w="5"/><text x="4.3873%" y="559.50"></text></g><g><title>&lt;cantracer::CanTracer as cannoli::Cannoli&gt;::exec (5 samples, 0.14%)</title><rect x="4.1373%" y="533" width="0.1407%" height="15" fill="rgb(210,16,53)" fg:x="147" fg:w="5"/><text x="4.3873%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (5 samples, 0.14%)</title><rect x="4.1373%" y="517" width="0.1407%" height="15" fill="rgb(235,124,12)" fg:x="147" fg:w="5"/><text x="4.3873%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.14%)</title><rect x="4.1373%" y="501" width="0.1407%" height="15" fill="rgb(224,169,11)" fg:x="147" fg:w="5"/><text x="4.3873%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.14%)</title><rect x="4.1373%" y="485" width="0.1407%" height="15" fill="rgb(250,166,2)" fg:x="147" fg:w="5"/><text x="4.3873%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.14%)</title><rect x="4.1373%" y="469" width="0.1407%" height="15" fill="rgb(242,216,29)" fg:x="147" fg:w="5"/><text x="4.3873%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.14%)</title><rect x="4.1373%" y="453" width="0.1407%" height="15" fill="rgb(230,116,27)" fg:x="147" fg:w="5"/><text x="4.3873%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.14%)</title><rect x="4.1373%" y="437" width="0.1407%" height="15" fill="rgb(228,99,48)" fg:x="147" fg:w="5"/><text x="4.3873%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.14%)</title><rect x="4.1373%" y="421" width="0.1407%" height="15" fill="rgb(253,11,6)" fg:x="147" fg:w="5"/><text x="4.3873%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.14%)</title><rect x="4.1373%" y="405" width="0.1407%" height="15" fill="rgb(247,143,39)" fg:x="147" fg:w="5"/><text x="4.3873%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.14%)</title><rect x="4.1373%" y="389" width="0.1407%" height="15" fill="rgb(236,97,10)" fg:x="147" fg:w="5"/><text x="4.3873%" y="399.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.14%)</title><rect x="4.1373%" y="373" width="0.1407%" height="15" fill="rgb(233,208,19)" fg:x="147" fg:w="5"/><text x="4.3873%" y="383.50"></text></g><g><title>__rust_alloc (1 samples, 0.03%)</title><rect x="4.2499%" y="357" width="0.0281%" height="15" fill="rgb(216,164,2)" fg:x="151" fg:w="1"/><text x="4.4999%" y="367.50"></text></g><g><title>cannoli::parse_payload (82 samples, 2.31%)</title><rect x="4.2781%" y="597" width="2.3079%" height="15" fill="rgb(220,129,5)" fg:x="152" fg:w="82"/><text x="4.5281%" y="607.50">c..</text></g><g><title>cantracer::CanTracerContext::translate (2 samples, 0.06%)</title><rect x="6.5860%" y="597" width="0.0563%" height="15" fill="rgb(242,17,10)" fg:x="234" fg:w="2"/><text x="6.8360%" y="607.50"></text></g><g><title>__spawni_child (1 samples, 0.03%)</title><rect x="6.6423%" y="581" width="0.0281%" height="15" fill="rgb(242,107,0)" fg:x="236" fg:w="1"/><text x="6.8923%" y="591.50"></text></g><g><title>__GI___libc_sigaction (1 samples, 0.03%)</title><rect x="6.6423%" y="565" width="0.0281%" height="15" fill="rgb(251,28,31)" fg:x="236" fg:w="1"/><text x="6.8923%" y="575.50"></text></g><g><title>syscall_return_via_sysret (1 samples, 0.03%)</title><rect x="6.6423%" y="549" width="0.0281%" height="15" fill="rgb(233,223,10)" fg:x="236" fg:w="1"/><text x="6.8923%" y="559.50"></text></g><g><title>ret_from_fork (5 samples, 0.14%)</title><rect x="6.6704%" y="581" width="0.1407%" height="15" fill="rgb(215,21,27)" fg:x="237" fg:w="5"/><text x="6.9204%" y="591.50"></text></g><g><title>schedule_tail (5 samples, 0.14%)</title><rect x="6.6704%" y="565" width="0.1407%" height="15" fill="rgb(232,23,21)" fg:x="237" fg:w="5"/><text x="6.9204%" y="575.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.14%)</title><rect x="6.6704%" y="549" width="0.1407%" height="15" fill="rgb(244,5,23)" fg:x="237" fg:w="5"/><text x="6.9204%" y="559.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.14%)</title><rect x="6.6704%" y="533" width="0.1407%" height="15" fill="rgb(226,81,46)" fg:x="237" fg:w="5"/><text x="6.9204%" y="543.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 0.14%)</title><rect x="6.6704%" y="517" width="0.1407%" height="15" fill="rgb(247,70,30)" fg:x="237" fg:w="5"/><text x="6.9204%" y="527.50"></text></g><g><title>native_write_msr (5 samples, 0.14%)</title><rect x="6.6704%" y="501" width="0.1407%" height="15" fill="rgb(212,68,19)" fg:x="237" fg:w="5"/><text x="6.9204%" y="511.50"></text></g><g><title>cannoli::create_cannoli::{{closure}}::{{closure}} (1 samples, 0.03%)</title><rect x="6.8111%" y="373" width="0.0281%" height="15" fill="rgb(240,187,13)" fg:x="242" fg:w="1"/><text x="7.0611%" y="383.50"></text></g><g><title>cannoli::handle_client (1 samples, 0.03%)</title><rect x="6.8111%" y="357" width="0.0281%" height="15" fill="rgb(223,113,26)" fg:x="242" fg:w="1"/><text x="7.0611%" y="367.50"></text></g><g><title>&lt;cantracer::CanTracer as cannoli::Cannoli&gt;::init_tid (1 samples, 0.03%)</title><rect x="6.8111%" y="341" width="0.0281%" height="15" fill="rgb(206,192,2)" fg:x="242" fg:w="1"/><text x="7.0611%" y="351.50"></text></g><g><title>cantracer::get_base (1 samples, 0.03%)</title><rect x="6.8111%" y="325" width="0.0281%" height="15" fill="rgb(241,108,4)" fg:x="242" fg:w="1"/><text x="7.0611%" y="335.50"></text></g><g><title>cantracer::get_maps (1 samples, 0.03%)</title><rect x="6.8111%" y="309" width="0.0281%" height="15" fill="rgb(247,173,49)" fg:x="242" fg:w="1"/><text x="7.0611%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.03%)</title><rect x="6.8111%" y="293" width="0.0281%" height="15" fill="rgb(224,114,35)" fg:x="242" fg:w="1"/><text x="7.0611%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.03%)</title><rect x="6.8111%" y="277" width="0.0281%" height="15" fill="rgb(245,159,27)" fg:x="242" fg:w="1"/><text x="7.0611%" y="287.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="6.8111%" y="261" width="0.0281%" height="15" fill="rgb(245,172,44)" fg:x="242" fg:w="1"/><text x="7.0611%" y="271.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (1 samples, 0.03%)</title><rect x="6.8111%" y="245" width="0.0281%" height="15" fill="rgb(236,23,11)" fg:x="242" fg:w="1"/><text x="7.0611%" y="255.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (1 samples, 0.03%)</title><rect x="6.8111%" y="229" width="0.0281%" height="15" fill="rgb(205,117,38)" fg:x="242" fg:w="1"/><text x="7.0611%" y="239.50"></text></g><g><title>core::str::pattern::Searcher::next_match (1 samples, 0.03%)</title><rect x="6.8111%" y="213" width="0.0281%" height="15" fill="rgb(237,72,25)" fg:x="242" fg:w="1"/><text x="7.0611%" y="223.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (1 samples, 0.03%)</title><rect x="6.8111%" y="197" width="0.0281%" height="15" fill="rgb(244,70,9)" fg:x="242" fg:w="1"/><text x="7.0611%" y="207.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="6.8111%" y="181" width="0.0281%" height="15" fill="rgb(217,125,39)" fg:x="242" fg:w="1"/><text x="7.0611%" y="191.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="6.8111%" y="165" width="0.0281%" height="15" fill="rgb(235,36,10)" fg:x="242" fg:w="1"/><text x="7.0611%" y="175.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.03%)</title><rect x="6.8111%" y="149" width="0.0281%" height="15" fill="rgb(251,123,47)" fg:x="242" fg:w="1"/><text x="7.0611%" y="159.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (1 samples, 0.03%)</title><rect x="6.8111%" y="133" width="0.0281%" height="15" fill="rgb(221,13,13)" fg:x="242" fg:w="1"/><text x="7.0611%" y="143.50"></text></g><g><title>core::char::from_u32_unchecked (1 samples, 0.03%)</title><rect x="6.8111%" y="117" width="0.0281%" height="15" fill="rgb(238,131,9)" fg:x="242" fg:w="1"/><text x="7.0611%" y="127.50"></text></g><g><title>core::char::convert::from_u32_unchecked (1 samples, 0.03%)</title><rect x="6.8111%" y="101" width="0.0281%" height="15" fill="rgb(211,50,8)" fg:x="242" fg:w="1"/><text x="7.0611%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="6.8393%" y="357" width="0.0281%" height="15" fill="rgb(245,182,24)" fg:x="243" fg:w="1"/><text x="7.0893%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.03%)</title><rect x="6.8393%" y="341" width="0.0281%" height="15" fill="rgb(242,14,37)" fg:x="243" fg:w="1"/><text x="7.0893%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.03%)</title><rect x="6.8393%" y="325" width="0.0281%" height="15" fill="rgb(246,228,12)" fg:x="243" fg:w="1"/><text x="7.0893%" y="335.50"></text></g><g><title>&lt;cantracer::CanTracer as cannoli::Cannoli&gt;::trace (1 samples, 0.03%)</title><rect x="6.8674%" y="357" width="0.0281%" height="15" fill="rgb(213,55,15)" fg:x="244" fg:w="1"/><text x="7.1174%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="6.8674%" y="341" width="0.0281%" height="15" fill="rgb(209,9,3)" fg:x="244" fg:w="1"/><text x="7.1174%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (1 samples, 0.03%)</title><rect x="6.8674%" y="325" width="0.0281%" height="15" fill="rgb(230,59,30)" fg:x="244" fg:w="1"/><text x="7.1174%" y="335.50"></text></g><g><title>__GI_mprotect (1 samples, 0.03%)</title><rect x="6.8956%" y="197" width="0.0281%" height="15" fill="rgb(209,121,21)" fg:x="245" fg:w="1"/><text x="7.1456%" y="207.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="6.8956%" y="181" width="0.0281%" height="15" fill="rgb(220,109,13)" fg:x="245" fg:w="1"/><text x="7.1456%" y="191.50"></text></g><g><title>do_syscall_64 (1 samples, 0.03%)</title><rect x="6.8956%" y="165" width="0.0281%" height="15" fill="rgb(232,18,1)" fg:x="245" fg:w="1"/><text x="7.1456%" y="175.50"></text></g><g><title>__x64_sys_mprotect (1 samples, 0.03%)</title><rect x="6.8956%" y="149" width="0.0281%" height="15" fill="rgb(215,41,42)" fg:x="245" fg:w="1"/><text x="7.1456%" y="159.50"></text></g><g><title>do_mprotect_pkey (1 samples, 0.03%)</title><rect x="6.8956%" y="133" width="0.0281%" height="15" fill="rgb(224,123,36)" fg:x="245" fg:w="1"/><text x="7.1456%" y="143.50"></text></g><g><title>mprotect_fixup (1 samples, 0.03%)</title><rect x="6.8956%" y="117" width="0.0281%" height="15" fill="rgb(240,125,3)" fg:x="245" fg:w="1"/><text x="7.1456%" y="127.50"></text></g><g><title>perf_event_mmap (1 samples, 0.03%)</title><rect x="6.8956%" y="101" width="0.0281%" height="15" fill="rgb(205,98,50)" fg:x="245" fg:w="1"/><text x="7.1456%" y="111.50"></text></g><g><title>perf_iterate_sb (1 samples, 0.03%)</title><rect x="6.8956%" y="85" width="0.0281%" height="15" fill="rgb(205,185,37)" fg:x="245" fg:w="1"/><text x="7.1456%" y="95.50"></text></g><g><title>perf_iterate_ctx (1 samples, 0.03%)</title><rect x="6.8956%" y="69" width="0.0281%" height="15" fill="rgb(238,207,15)" fg:x="245" fg:w="1"/><text x="7.1456%" y="79.50"></text></g><g><title>perf_event_mmap_output (1 samples, 0.03%)</title><rect x="6.8956%" y="53" width="0.0281%" height="15" fill="rgb(213,199,42)" fg:x="245" fg:w="1"/><text x="7.1456%" y="63.50"></text></g><g><title>perf_output_begin (1 samples, 0.03%)</title><rect x="6.8956%" y="37" width="0.0281%" height="15" fill="rgb(235,201,11)" fg:x="245" fg:w="1"/><text x="7.1456%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.06%)</title><rect x="6.8956%" y="357" width="0.0563%" height="15" fill="rgb(207,46,11)" fg:x="245" fg:w="2"/><text x="7.1456%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.06%)</title><rect x="6.8956%" y="341" width="0.0563%" height="15" fill="rgb(241,35,35)" fg:x="245" fg:w="2"/><text x="7.1456%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.06%)</title><rect x="6.8956%" y="325" width="0.0563%" height="15" fill="rgb(243,32,47)" fg:x="245" fg:w="2"/><text x="7.1456%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.06%)</title><rect x="6.8956%" y="309" width="0.0563%" height="15" fill="rgb(247,202,23)" fg:x="245" fg:w="2"/><text x="7.1456%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.06%)</title><rect x="6.8956%" y="293" width="0.0563%" height="15" fill="rgb(219,102,11)" fg:x="245" fg:w="2"/><text x="7.1456%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.06%)</title><rect x="6.8956%" y="277" width="0.0563%" height="15" fill="rgb(243,110,44)" fg:x="245" fg:w="2"/><text x="7.1456%" y="287.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.06%)</title><rect x="6.8956%" y="261" width="0.0563%" height="15" fill="rgb(222,74,54)" fg:x="245" fg:w="2"/><text x="7.1456%" y="271.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.06%)</title><rect x="6.8956%" y="245" width="0.0563%" height="15" fill="rgb(216,99,12)" fg:x="245" fg:w="2"/><text x="7.1456%" y="255.50"></text></g><g><title>_int_malloc (2 samples, 0.06%)</title><rect x="6.8956%" y="229" width="0.0563%" height="15" fill="rgb(226,22,26)" fg:x="245" fg:w="2"/><text x="7.1456%" y="239.50"></text></g><g><title>sysmalloc (2 samples, 0.06%)</title><rect x="6.8956%" y="213" width="0.0563%" height="15" fill="rgb(217,163,10)" fg:x="245" fg:w="2"/><text x="7.1456%" y="223.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.03%)</title><rect x="6.9237%" y="197" width="0.0281%" height="15" fill="rgb(213,25,53)" fg:x="246" fg:w="1"/><text x="7.1737%" y="207.50"></text></g><g><title>exc_page_fault (1 samples, 0.03%)</title><rect x="6.9237%" y="181" width="0.0281%" height="15" fill="rgb(252,105,26)" fg:x="246" fg:w="1"/><text x="7.1737%" y="191.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="6.9237%" y="165" width="0.0281%" height="15" fill="rgb(220,39,43)" fg:x="246" fg:w="1"/><text x="7.1737%" y="175.50"></text></g><g><title>handle_mm_fault (1 samples, 0.03%)</title><rect x="6.9237%" y="149" width="0.0281%" height="15" fill="rgb(229,68,48)" fg:x="246" fg:w="1"/><text x="7.1737%" y="159.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.03%)</title><rect x="6.9237%" y="133" width="0.0281%" height="15" fill="rgb(252,8,32)" fg:x="246" fg:w="1"/><text x="7.1737%" y="143.50"></text></g><g><title>page_add_new_anon_rmap (1 samples, 0.03%)</title><rect x="6.9237%" y="117" width="0.0281%" height="15" fill="rgb(223,20,43)" fg:x="246" fg:w="1"/><text x="7.1737%" y="127.50"></text></g><g><title>__mod_lruvec_page_state (1 samples, 0.03%)</title><rect x="6.9237%" y="101" width="0.0281%" height="15" fill="rgb(229,81,49)" fg:x="246" fg:w="1"/><text x="7.1737%" y="111.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.03%)</title><rect x="6.9237%" y="85" width="0.0281%" height="15" fill="rgb(236,28,36)" fg:x="246" fg:w="1"/><text x="7.1737%" y="95.50"></text></g><g><title>check_preemption_disabled (1 samples, 0.03%)</title><rect x="6.9237%" y="69" width="0.0281%" height="15" fill="rgb(249,185,26)" fg:x="246" fg:w="1"/><text x="7.1737%" y="79.50"></text></g><g><title>core::mem::drop (1 samples, 0.03%)</title><rect x="6.9519%" y="357" width="0.0281%" height="15" fill="rgb(249,174,33)" fg:x="247" fg:w="1"/><text x="7.2019%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;cannoli::handle_client::State&lt;cantracer::CanTracer&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="6.9519%" y="341" width="0.0281%" height="15" fill="rgb(233,201,37)" fg:x="247" fg:w="1"/><text x="7.2019%" y="351.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="6.9519%" y="325" width="0.0281%" height="15" fill="rgb(221,78,26)" fg:x="247" fg:w="1"/><text x="7.2019%" y="335.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (1 samples, 0.03%)</title><rect x="6.9519%" y="309" width="0.0281%" height="15" fill="rgb(250,127,30)" fg:x="247" fg:w="1"/><text x="7.2019%" y="319.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (1 samples, 0.03%)</title><rect x="6.9519%" y="293" width="0.0281%" height="15" fill="rgb(230,49,44)" fg:x="247" fg:w="1"/><text x="7.2019%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (1 samples, 0.03%)</title><rect x="6.9519%" y="277" width="0.0281%" height="15" fill="rgb(229,67,23)" fg:x="247" fg:w="1"/><text x="7.2019%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_swap (1 samples, 0.03%)</title><rect x="6.9519%" y="261" width="0.0281%" height="15" fill="rgb(249,83,47)" fg:x="247" fg:w="1"/><text x="7.2019%" y="271.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="6.9800%" y="325" width="0.0281%" height="15" fill="rgb(215,43,3)" fg:x="248" fg:w="1"/><text x="7.2300%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (4 samples, 0.11%)</title><rect x="6.9800%" y="357" width="0.1126%" height="15" fill="rgb(238,154,13)" fg:x="248" fg:w="4"/><text x="7.2300%" y="367.50"></text></g><g><title>core::mem::replace (4 samples, 0.11%)</title><rect x="6.9800%" y="341" width="0.1126%" height="15" fill="rgb(219,56,2)" fg:x="248" fg:w="4"/><text x="7.2300%" y="351.50"></text></g><g><title>core::ptr::write (3 samples, 0.08%)</title><rect x="7.0082%" y="325" width="0.0844%" height="15" fill="rgb(233,0,4)" fg:x="249" fg:w="3"/><text x="7.2582%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="7.0926%" y="277" width="0.0281%" height="15" fill="rgb(235,30,7)" fg:x="252" fg:w="1"/><text x="7.3426%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.03%)</title><rect x="7.0926%" y="261" width="0.0281%" height="15" fill="rgb(250,79,13)" fg:x="252" fg:w="1"/><text x="7.3426%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.03%)</title><rect x="7.0926%" y="245" width="0.0281%" height="15" fill="rgb(211,146,34)" fg:x="252" fg:w="1"/><text x="7.3426%" y="255.50"></text></g><g><title>__free (1 samples, 0.03%)</title><rect x="7.2052%" y="213" width="0.0281%" height="15" fill="rgb(228,22,38)" fg:x="256" fg:w="1"/><text x="7.4552%" y="223.50"></text></g><g><title>_int_free (1 samples, 0.03%)</title><rect x="7.2052%" y="197" width="0.0281%" height="15" fill="rgb(235,168,5)" fg:x="256" fg:w="1"/><text x="7.4552%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.08%)</title><rect x="7.1770%" y="245" width="0.0844%" height="15" fill="rgb(221,155,16)" fg:x="255" fg:w="3"/><text x="7.4270%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.06%)</title><rect x="7.2052%" y="229" width="0.0563%" height="15" fill="rgb(215,215,53)" fg:x="256" fg:w="2"/><text x="7.4552%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::align (1 samples, 0.03%)</title><rect x="7.2333%" y="213" width="0.0281%" height="15" fill="rgb(223,4,10)" fg:x="257" fg:w="1"/><text x="7.4833%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.20%)</title><rect x="7.0926%" y="341" width="0.1970%" height="15" fill="rgb(234,103,6)" fg:x="252" fg:w="7"/><text x="7.3426%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[cantracer::Instr]&gt; (7 samples, 0.20%)</title><rect x="7.0926%" y="325" width="0.1970%" height="15" fill="rgb(227,97,0)" fg:x="252" fg:w="7"/><text x="7.3426%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;cantracer::Instr&gt; (7 samples, 0.20%)</title><rect x="7.0926%" y="309" width="0.1970%" height="15" fill="rgb(234,150,53)" fg:x="252" fg:w="7"/><text x="7.3426%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (7 samples, 0.20%)</title><rect x="7.0926%" y="293" width="0.1970%" height="15" fill="rgb(228,201,54)" fg:x="252" fg:w="7"/><text x="7.3426%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (6 samples, 0.17%)</title><rect x="7.1207%" y="277" width="0.1689%" height="15" fill="rgb(222,22,37)" fg:x="253" fg:w="6"/><text x="7.3707%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.17%)</title><rect x="7.1207%" y="261" width="0.1689%" height="15" fill="rgb(237,53,32)" fg:x="253" fg:w="6"/><text x="7.3707%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.03%)</title><rect x="7.2615%" y="245" width="0.0281%" height="15" fill="rgb(233,25,53)" fg:x="258" fg:w="1"/><text x="7.5115%" y="255.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.03%)</title><rect x="7.2615%" y="229" width="0.0281%" height="15" fill="rgb(210,40,34)" fg:x="258" fg:w="1"/><text x="7.5115%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.03%)</title><rect x="7.2615%" y="213" width="0.0281%" height="15" fill="rgb(241,220,44)" fg:x="258" fg:w="1"/><text x="7.5115%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;cantracer::Instr&gt;&gt; (8 samples, 0.23%)</title><rect x="7.0926%" y="357" width="0.2252%" height="15" fill="rgb(235,28,35)" fg:x="252" fg:w="8"/><text x="7.3426%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;cantracer::Instr&gt;&gt; (1 samples, 0.03%)</title><rect x="7.2896%" y="341" width="0.0281%" height="15" fill="rgb(210,56,17)" fg:x="259" fg:w="1"/><text x="7.5396%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="7.2896%" y="325" width="0.0281%" height="15" fill="rgb(224,130,29)" fg:x="259" fg:w="1"/><text x="7.5396%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="7.2896%" y="309" width="0.0281%" height="15" fill="rgb(235,212,8)" fg:x="259" fg:w="1"/><text x="7.5396%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="7.2896%" y="293" width="0.0281%" height="15" fill="rgb(223,33,50)" fg:x="259" fg:w="1"/><text x="7.5396%" y="303.50"></text></g><g><title>__free (1 samples, 0.03%)</title><rect x="7.2896%" y="277" width="0.0281%" height="15" fill="rgb(219,149,13)" fg:x="259" fg:w="1"/><text x="7.5396%" y="287.50"></text></g><g><title>_int_free (1 samples, 0.03%)</title><rect x="7.2896%" y="261" width="0.0281%" height="15" fill="rgb(250,156,29)" fg:x="259" fg:w="1"/><text x="7.5396%" y="271.50"></text></g><g><title>__GI_madvise (1 samples, 0.03%)</title><rect x="7.2896%" y="245" width="0.0281%" height="15" fill="rgb(216,193,19)" fg:x="259" fg:w="1"/><text x="7.5396%" y="255.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="7.2896%" y="229" width="0.0281%" height="15" fill="rgb(216,135,14)" fg:x="259" fg:w="1"/><text x="7.5396%" y="239.50"></text></g><g><title>do_syscall_64 (1 samples, 0.03%)</title><rect x="7.2896%" y="213" width="0.0281%" height="15" fill="rgb(241,47,5)" fg:x="259" fg:w="1"/><text x="7.5396%" y="223.50"></text></g><g><title>__x64_sys_madvise (1 samples, 0.03%)</title><rect x="7.2896%" y="197" width="0.0281%" height="15" fill="rgb(233,42,35)" fg:x="259" fg:w="1"/><text x="7.5396%" y="207.50"></text></g><g><title>do_madvise.part.0 (1 samples, 0.03%)</title><rect x="7.2896%" y="181" width="0.0281%" height="15" fill="rgb(231,13,6)" fg:x="259" fg:w="1"/><text x="7.5396%" y="191.50"></text></g><g><title>zap_page_range (1 samples, 0.03%)</title><rect x="7.2896%" y="165" width="0.0281%" height="15" fill="rgb(207,181,40)" fg:x="259" fg:w="1"/><text x="7.5396%" y="175.50"></text></g><g><title>tlb_finish_mmu (1 samples, 0.03%)</title><rect x="7.2896%" y="149" width="0.0281%" height="15" fill="rgb(254,173,49)" fg:x="259" fg:w="1"/><text x="7.5396%" y="159.50"></text></g><g><title>tlb_batch_pages_flush (1 samples, 0.03%)</title><rect x="7.2896%" y="133" width="0.0281%" height="15" fill="rgb(221,1,38)" fg:x="259" fg:w="1"/><text x="7.5396%" y="143.50"></text></g><g><title>release_pages (1 samples, 0.03%)</title><rect x="7.2896%" y="117" width="0.0281%" height="15" fill="rgb(206,124,46)" fg:x="259" fg:w="1"/><text x="7.5396%" y="127.50"></text></g><g><title>free_unref_page_list (1 samples, 0.03%)</title><rect x="7.2896%" y="101" width="0.0281%" height="15" fill="rgb(249,21,11)" fg:x="259" fg:w="1"/><text x="7.5396%" y="111.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.03%)</title><rect x="7.5711%" y="341" width="0.0281%" height="15" fill="rgb(222,201,40)" fg:x="269" fg:w="1"/><text x="7.8211%" y="351.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (2 samples, 0.06%)</title><rect x="7.7399%" y="309" width="0.0563%" height="15" fill="rgb(235,61,29)" fg:x="275" fg:w="2"/><text x="7.9899%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (2 samples, 0.06%)</title><rect x="7.7399%" y="293" width="0.0563%" height="15" fill="rgb(219,207,3)" fg:x="275" fg:w="2"/><text x="7.9899%" y="303.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for usize&gt;::clone (1 samples, 0.03%)</title><rect x="7.7962%" y="309" width="0.0281%" height="15" fill="rgb(222,56,46)" fg:x="277" fg:w="1"/><text x="8.0462%" y="319.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (10 samples, 0.28%)</title><rect x="7.5992%" y="341" width="0.2815%" height="15" fill="rgb(239,76,54)" fg:x="270" fg:w="10"/><text x="7.8492%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (9 samples, 0.25%)</title><rect x="7.6274%" y="325" width="0.2533%" height="15" fill="rgb(231,124,27)" fg:x="271" fg:w="9"/><text x="7.8774%" y="335.50"></text></g><g><title>core::mem::replace (2 samples, 0.06%)</title><rect x="7.8244%" y="309" width="0.0563%" height="15" fill="rgb(249,195,6)" fg:x="278" fg:w="2"/><text x="8.0744%" y="319.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="7.8525%" y="293" width="0.0281%" height="15" fill="rgb(237,174,47)" fg:x="279" fg:w="1"/><text x="8.1025%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (7 samples, 0.20%)</title><rect x="7.8807%" y="341" width="0.1970%" height="15" fill="rgb(206,201,31)" fg:x="280" fg:w="7"/><text x="8.1307%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_load (6 samples, 0.17%)</title><rect x="7.9088%" y="325" width="0.1689%" height="15" fill="rgb(231,57,52)" fg:x="281" fg:w="6"/><text x="8.1588%" y="335.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (46 samples, 1.29%)</title><rect x="6.8111%" y="549" width="1.2947%" height="15" fill="rgb(248,177,22)" fg:x="242" fg:w="46"/><text x="7.0611%" y="559.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (46 samples, 1.29%)</title><rect x="6.8111%" y="533" width="1.2947%" height="15" fill="rgb(215,211,37)" fg:x="242" fg:w="46"/><text x="7.0611%" y="543.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (46 samples, 1.29%)</title><rect x="6.8111%" y="517" width="1.2947%" height="15" fill="rgb(241,128,51)" fg:x="242" fg:w="46"/><text x="7.0611%" y="527.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (46 samples, 1.29%)</title><rect x="6.8111%" y="501" width="1.2947%" height="15" fill="rgb(227,165,31)" fg:x="242" fg:w="46"/><text x="7.0611%" y="511.50"></text></g><g><title>std::panic::catch_unwind (46 samples, 1.29%)</title><rect x="6.8111%" y="485" width="1.2947%" height="15" fill="rgb(228,167,24)" fg:x="242" fg:w="46"/><text x="7.0611%" y="495.50"></text></g><g><title>std::panicking::try (46 samples, 1.29%)</title><rect x="6.8111%" y="469" width="1.2947%" height="15" fill="rgb(228,143,12)" fg:x="242" fg:w="46"/><text x="7.0611%" y="479.50"></text></g><g><title>__rust_try (46 samples, 1.29%)</title><rect x="6.8111%" y="453" width="1.2947%" height="15" fill="rgb(249,149,8)" fg:x="242" fg:w="46"/><text x="7.0611%" y="463.50"></text></g><g><title>std::panicking::try::do_call (46 samples, 1.29%)</title><rect x="6.8111%" y="437" width="1.2947%" height="15" fill="rgb(243,35,44)" fg:x="242" fg:w="46"/><text x="7.0611%" y="447.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (46 samples, 1.29%)</title><rect x="6.8111%" y="421" width="1.2947%" height="15" fill="rgb(246,89,9)" fg:x="242" fg:w="46"/><text x="7.0611%" y="431.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (46 samples, 1.29%)</title><rect x="6.8111%" y="405" width="1.2947%" height="15" fill="rgb(233,213,13)" fg:x="242" fg:w="46"/><text x="7.0611%" y="415.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (46 samples, 1.29%)</title><rect x="6.8111%" y="389" width="1.2947%" height="15" fill="rgb(233,141,41)" fg:x="242" fg:w="46"/><text x="7.0611%" y="399.50"></text></g><g><title>cannoli::handle_client::{{closure}}::{{closure}} (45 samples, 1.27%)</title><rect x="6.8393%" y="373" width="1.2665%" height="15" fill="rgb(239,167,4)" fg:x="243" fg:w="45"/><text x="7.0893%" y="383.50"></text></g><g><title>mempipe::RecvPipe&lt;_,_&gt;::try_recv (28 samples, 0.79%)</title><rect x="7.3178%" y="357" width="0.7881%" height="15" fill="rgb(209,217,16)" fg:x="260" fg:w="28"/><text x="7.5678%" y="367.50"></text></g><g><title>mempipe::RecvPipe&lt;_,_&gt;::request_ticket (1 samples, 0.03%)</title><rect x="8.0777%" y="341" width="0.0281%" height="15" fill="rgb(219,88,35)" fg:x="287" fg:w="1"/><text x="8.3277%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU64::fetch_add (1 samples, 0.03%)</title><rect x="8.0777%" y="325" width="0.0281%" height="15" fill="rgb(220,193,23)" fg:x="287" fg:w="1"/><text x="8.3277%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.03%)</title><rect x="8.0777%" y="309" width="0.0281%" height="15" fill="rgb(230,90,52)" fg:x="287" fg:w="1"/><text x="8.3277%" y="319.50"></text></g><g><title>__GI_sigaltstack (1 samples, 0.03%)</title><rect x="8.1058%" y="517" width="0.0281%" height="15" fill="rgb(252,106,19)" fg:x="288" fg:w="1"/><text x="8.3558%" y="527.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="8.1058%" y="501" width="0.0281%" height="15" fill="rgb(206,74,20)" fg:x="288" fg:w="1"/><text x="8.3558%" y="511.50"></text></g><g><title>do_syscall_64 (1 samples, 0.03%)</title><rect x="8.1058%" y="485" width="0.0281%" height="15" fill="rgb(230,138,44)" fg:x="288" fg:w="1"/><text x="8.3558%" y="495.50"></text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.03%)</title><rect x="8.1058%" y="469" width="0.0281%" height="15" fill="rgb(235,182,43)" fg:x="288" fg:w="1"/><text x="8.3558%" y="479.50"></text></g><g><title>perf_event_mmap (2 samples, 0.06%)</title><rect x="8.1340%" y="373" width="0.0563%" height="15" fill="rgb(242,16,51)" fg:x="289" fg:w="2"/><text x="8.3840%" y="383.50"></text></g><g><title>perf_iterate_sb (2 samples, 0.06%)</title><rect x="8.1340%" y="357" width="0.0563%" height="15" fill="rgb(248,9,4)" fg:x="289" fg:w="2"/><text x="8.3840%" y="367.50"></text></g><g><title>perf_iterate_ctx (1 samples, 0.03%)</title><rect x="8.1621%" y="341" width="0.0281%" height="15" fill="rgb(210,31,22)" fg:x="290" fg:w="1"/><text x="8.4121%" y="351.50"></text></g><g><title>perf_event_mmap_output (1 samples, 0.03%)</title><rect x="8.1621%" y="325" width="0.0281%" height="15" fill="rgb(239,54,39)" fg:x="290" fg:w="1"/><text x="8.4121%" y="335.50"></text></g><g><title>__task_pid_nr_ns (1 samples, 0.03%)</title><rect x="8.1621%" y="309" width="0.0281%" height="15" fill="rgb(230,99,41)" fg:x="290" fg:w="1"/><text x="8.4121%" y="319.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.03%)</title><rect x="8.1621%" y="293" width="0.0281%" height="15" fill="rgb(253,106,12)" fg:x="290" fg:w="1"/><text x="8.4121%" y="303.50"></text></g><g><title>vm_area_alloc (1 samples, 0.03%)</title><rect x="8.1903%" y="373" width="0.0281%" height="15" fill="rgb(213,46,41)" fg:x="291" fg:w="1"/><text x="8.4403%" y="383.50"></text></g><g><title>kmem_cache_alloc (1 samples, 0.03%)</title><rect x="8.1903%" y="357" width="0.0281%" height="15" fill="rgb(215,133,35)" fg:x="291" fg:w="1"/><text x="8.4403%" y="367.50"></text></g><g><title>obj_cgroup_charge (1 samples, 0.03%)</title><rect x="8.1903%" y="341" width="0.0281%" height="15" fill="rgb(213,28,5)" fg:x="291" fg:w="1"/><text x="8.4403%" y="351.50"></text></g><g><title>refill_obj_stock (1 samples, 0.03%)</title><rect x="8.1903%" y="325" width="0.0281%" height="15" fill="rgb(215,77,49)" fg:x="291" fg:w="1"/><text x="8.4403%" y="335.50"></text></g><g><title>drain_obj_stock (1 samples, 0.03%)</title><rect x="8.1903%" y="309" width="0.0281%" height="15" fill="rgb(248,100,22)" fg:x="291" fg:w="1"/><text x="8.4403%" y="319.50"></text></g><g><title>mod_memcg_lruvec_state (1 samples, 0.03%)</title><rect x="8.1903%" y="293" width="0.0281%" height="15" fill="rgb(208,67,9)" fg:x="291" fg:w="1"/><text x="8.4403%" y="303.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.03%)</title><rect x="8.1903%" y="277" width="0.0281%" height="15" fill="rgb(219,133,21)" fg:x="291" fg:w="1"/><text x="8.4403%" y="287.50"></text></g><g><title>clone3 (57 samples, 1.60%)</title><rect x="6.6423%" y="597" width="1.6043%" height="15" fill="rgb(246,46,29)" fg:x="236" fg:w="57"/><text x="6.8923%" y="607.50"></text></g><g><title>start_thread (51 samples, 1.44%)</title><rect x="6.8111%" y="581" width="1.4354%" height="15" fill="rgb(246,185,52)" fg:x="242" fg:w="51"/><text x="7.0611%" y="591.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (51 samples, 1.44%)</title><rect x="6.8111%" y="565" width="1.4354%" height="15" fill="rgb(252,136,11)" fg:x="242" fg:w="51"/><text x="7.0611%" y="575.50"></text></g><g><title>std::sys::unix::stack_overflow::Handler::new (5 samples, 0.14%)</title><rect x="8.1058%" y="549" width="0.1407%" height="15" fill="rgb(219,138,53)" fg:x="288" fg:w="5"/><text x="8.3558%" y="559.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (5 samples, 0.14%)</title><rect x="8.1058%" y="533" width="0.1407%" height="15" fill="rgb(211,51,23)" fg:x="288" fg:w="5"/><text x="8.3558%" y="543.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (4 samples, 0.11%)</title><rect x="8.1340%" y="517" width="0.1126%" height="15" fill="rgb(247,221,28)" fg:x="289" fg:w="4"/><text x="8.3840%" y="527.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (4 samples, 0.11%)</title><rect x="8.1340%" y="501" width="0.1126%" height="15" fill="rgb(251,222,45)" fg:x="289" fg:w="4"/><text x="8.3840%" y="511.50"></text></g><g><title>__GI___mmap64 (4 samples, 0.11%)</title><rect x="8.1340%" y="485" width="0.1126%" height="15" fill="rgb(217,162,53)" fg:x="289" fg:w="4"/><text x="8.3840%" y="495.50"></text></g><g><title>__GI___mmap64 (4 samples, 0.11%)</title><rect x="8.1340%" y="469" width="0.1126%" height="15" fill="rgb(229,93,14)" fg:x="289" fg:w="4"/><text x="8.3840%" y="479.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (4 samples, 0.11%)</title><rect x="8.1340%" y="453" width="0.1126%" height="15" fill="rgb(209,67,49)" fg:x="289" fg:w="4"/><text x="8.3840%" y="463.50"></text></g><g><title>do_syscall_64 (4 samples, 0.11%)</title><rect x="8.1340%" y="437" width="0.1126%" height="15" fill="rgb(213,87,29)" fg:x="289" fg:w="4"/><text x="8.3840%" y="447.50"></text></g><g><title>vm_mmap_pgoff (4 samples, 0.11%)</title><rect x="8.1340%" y="421" width="0.1126%" height="15" fill="rgb(205,151,52)" fg:x="289" fg:w="4"/><text x="8.3840%" y="431.50"></text></g><g><title>do_mmap (4 samples, 0.11%)</title><rect x="8.1340%" y="405" width="0.1126%" height="15" fill="rgb(253,215,39)" fg:x="289" fg:w="4"/><text x="8.3840%" y="415.50"></text></g><g><title>mmap_region (4 samples, 0.11%)</title><rect x="8.1340%" y="389" width="0.1126%" height="15" fill="rgb(221,220,41)" fg:x="289" fg:w="4"/><text x="8.3840%" y="399.50"></text></g><g><title>vma_link (1 samples, 0.03%)</title><rect x="8.2184%" y="373" width="0.0281%" height="15" fill="rgb(218,133,21)" fg:x="292" fg:w="1"/><text x="8.4684%" y="383.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.03%)</title><rect x="8.2466%" y="597" width="0.0281%" height="15" fill="rgb(221,193,43)" fg:x="293" fg:w="1"/><text x="8.4966%" y="607.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or_else (160 samples, 4.50%)</title><rect x="8.2747%" y="389" width="4.5032%" height="15" fill="rgb(240,128,52)" fg:x="294" fg:w="160"/><text x="8.5247%" y="399.50">core:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (261 samples, 7.35%)</title><rect x="8.2747%" y="597" width="7.3459%" height="15" fill="rgb(253,114,12)" fg:x="294" fg:w="261"/><text x="8.5247%" y="607.50">core::ops:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (261 samples, 7.35%)</title><rect x="8.2747%" y="581" width="7.3459%" height="15" fill="rgb(215,223,47)" fg:x="294" fg:w="261"/><text x="8.5247%" y="591.50">std::threa..</text></g><g><title>std::panic::catch_unwind (261 samples, 7.35%)</title><rect x="8.2747%" y="565" width="7.3459%" height="15" fill="rgb(248,225,23)" fg:x="294" fg:w="261"/><text x="8.5247%" y="575.50">std::panic..</text></g><g><title>std::panicking::try (261 samples, 7.35%)</title><rect x="8.2747%" y="549" width="7.3459%" height="15" fill="rgb(250,108,0)" fg:x="294" fg:w="261"/><text x="8.5247%" y="559.50">std::panic..</text></g><g><title>__rust_try (261 samples, 7.35%)</title><rect x="8.2747%" y="533" width="7.3459%" height="15" fill="rgb(228,208,7)" fg:x="294" fg:w="261"/><text x="8.5247%" y="543.50">__rust_try</text></g><g><title>std::panicking::try::do_call (261 samples, 7.35%)</title><rect x="8.2747%" y="517" width="7.3459%" height="15" fill="rgb(244,45,10)" fg:x="294" fg:w="261"/><text x="8.5247%" y="527.50">std::panic..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (261 samples, 7.35%)</title><rect x="8.2747%" y="501" width="7.3459%" height="15" fill="rgb(207,125,25)" fg:x="294" fg:w="261"/><text x="8.5247%" y="511.50">&lt;core::pan..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (261 samples, 7.35%)</title><rect x="8.2747%" y="485" width="7.3459%" height="15" fill="rgb(210,195,18)" fg:x="294" fg:w="261"/><text x="8.5247%" y="495.50">std::threa..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (261 samples, 7.35%)</title><rect x="8.2747%" y="469" width="7.3459%" height="15" fill="rgb(249,80,12)" fg:x="294" fg:w="261"/><text x="8.5247%" y="479.50">std::sys_c..</text></g><g><title>cannoli::handle_client::{{closure}}::{{closure}} (261 samples, 7.35%)</title><rect x="8.2747%" y="453" width="7.3459%" height="15" fill="rgb(221,65,9)" fg:x="294" fg:w="261"/><text x="8.5247%" y="463.50">cannoli::h..</text></g><g><title>mempipe::RecvPipe&lt;_,_&gt;::try_recv (261 samples, 7.35%)</title><rect x="8.2747%" y="437" width="7.3459%" height="15" fill="rgb(235,49,36)" fg:x="294" fg:w="261"/><text x="8.5247%" y="447.50">mempipe::R..</text></g><g><title>cannoli::handle_client::{{closure}}::{{closure}}::{{closure}} (261 samples, 7.35%)</title><rect x="8.2747%" y="421" width="7.3459%" height="15" fill="rgb(225,32,20)" fg:x="294" fg:w="261"/><text x="8.5247%" y="431.50">cannoli::h..</text></g><g><title>cannoli::parse_payload (261 samples, 7.35%)</title><rect x="8.2747%" y="405" width="7.3459%" height="15" fill="rgb(215,141,46)" fg:x="294" fg:w="261"/><text x="8.5247%" y="415.50">cannoli::p..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (101 samples, 2.84%)</title><rect x="12.7779%" y="389" width="2.8427%" height="15" fill="rgb(250,160,47)" fg:x="454" fg:w="101"/><text x="13.0279%" y="399.50">co..</text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (101 samples, 2.84%)</title><rect x="12.7779%" y="373" width="2.8427%" height="15" fill="rgb(216,222,40)" fg:x="454" fg:w="101"/><text x="13.0279%" y="383.50">&lt;c..</text></g><g><title>core::option::Option&lt;T&gt;::ok_or_else (11 samples, 0.31%)</title><rect x="15.6206%" y="597" width="0.3096%" height="15" fill="rgb(234,217,39)" fg:x="555" fg:w="11"/><text x="15.8706%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.03%)</title><rect x="15.9302%" y="597" width="0.0281%" height="15" fill="rgb(207,178,40)" fg:x="566" fg:w="1"/><text x="16.1802%" y="607.50"></text></g><g><title>core::ptr::read_unaligned (10 samples, 0.28%)</title><rect x="15.9583%" y="597" width="0.2815%" height="15" fill="rgb(221,136,13)" fg:x="567" fg:w="10"/><text x="16.2083%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (19 samples, 0.53%)</title><rect x="16.2398%" y="597" width="0.5348%" height="15" fill="rgb(249,199,10)" fg:x="577" fg:w="19"/><text x="16.4898%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (7 samples, 0.20%)</title><rect x="16.7746%" y="597" width="0.1970%" height="15" fill="rgb(249,222,13)" fg:x="596" fg:w="7"/><text x="17.0246%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (12 samples, 0.34%)</title><rect x="16.9716%" y="597" width="0.3377%" height="15" fill="rgb(244,185,38)" fg:x="603" fg:w="12"/><text x="17.2216%" y="607.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="17.3093%" y="597" width="0.0281%" height="15" fill="rgb(236,202,9)" fg:x="615" fg:w="1"/><text x="17.5593%" y="607.50"></text></g><g><title>do_syscall_64 (1 samples, 0.03%)</title><rect x="17.3093%" y="581" width="0.0281%" height="15" fill="rgb(250,229,37)" fg:x="615" fg:w="1"/><text x="17.5593%" y="591.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.03%)</title><rect x="17.3093%" y="565" width="0.0281%" height="15" fill="rgb(206,174,23)" fg:x="615" fg:w="1"/><text x="17.5593%" y="575.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 0.03%)</title><rect x="17.3093%" y="549" width="0.0281%" height="15" fill="rgb(211,33,43)" fg:x="615" fg:w="1"/><text x="17.5593%" y="559.50"></text></g><g><title>bprm_execve (1 samples, 0.03%)</title><rect x="17.3093%" y="533" width="0.0281%" height="15" fill="rgb(245,58,50)" fg:x="615" fg:w="1"/><text x="17.5593%" y="543.50"></text></g><g><title>load_elf_binary (1 samples, 0.03%)</title><rect x="17.3093%" y="517" width="0.0281%" height="15" fill="rgb(244,68,36)" fg:x="615" fg:w="1"/><text x="17.5593%" y="527.50"></text></g><g><title>setup_arg_pages (1 samples, 0.03%)</title><rect x="17.3093%" y="501" width="0.0281%" height="15" fill="rgb(232,229,15)" fg:x="615" fg:w="1"/><text x="17.5593%" y="511.50"></text></g><g><title>shift_arg_pages (1 samples, 0.03%)</title><rect x="17.3093%" y="485" width="0.0281%" height="15" fill="rgb(254,30,23)" fg:x="615" fg:w="1"/><text x="17.5593%" y="495.50"></text></g><g><title>move_page_tables.part.0 (1 samples, 0.03%)</title><rect x="17.3093%" y="469" width="0.0281%" height="15" fill="rgb(235,160,14)" fg:x="615" fg:w="1"/><text x="17.5593%" y="479.50"></text></g><g><title>__pmd_alloc (1 samples, 0.03%)</title><rect x="17.3093%" y="453" width="0.0281%" height="15" fill="rgb(212,155,44)" fg:x="615" fg:w="1"/><text x="17.5593%" y="463.50"></text></g><g><title>__alloc_pages (1 samples, 0.03%)</title><rect x="17.3093%" y="437" width="0.0281%" height="15" fill="rgb(226,2,50)" fg:x="615" fg:w="1"/><text x="17.5593%" y="447.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.03%)</title><rect x="17.3093%" y="421" width="0.0281%" height="15" fill="rgb(234,177,6)" fg:x="615" fg:w="1"/><text x="17.5593%" y="431.50"></text></g><g><title>rmqueue_bulk (1 samples, 0.03%)</title><rect x="17.3093%" y="405" width="0.0281%" height="15" fill="rgb(217,24,9)" fg:x="615" fg:w="1"/><text x="17.5593%" y="415.50"></text></g><g><title>mempipe::RecvPipe&lt;_,_&gt;::try_recv (1 samples, 0.03%)</title><rect x="17.3375%" y="597" width="0.0281%" height="15" fill="rgb(220,13,46)" fg:x="616" fg:w="1"/><text x="17.5875%" y="607.50"></text></g><g><title>cannoli::handle_client::{{closure}}::{{closure}}::{{closure}} (1 samples, 0.03%)</title><rect x="17.3375%" y="581" width="0.0281%" height="15" fill="rgb(239,221,27)" fg:x="616" fg:w="1"/><text x="17.5875%" y="591.50"></text></g><g><title>cannoli::parse_payload (1 samples, 0.03%)</title><rect x="17.3375%" y="565" width="0.0281%" height="15" fill="rgb(222,198,25)" fg:x="616" fg:w="1"/><text x="17.5875%" y="575.50"></text></g><g><title>&lt;cantracer::CanTracer as cannoli::Cannoli&gt;::exec (1 samples, 0.03%)</title><rect x="17.3375%" y="549" width="0.0281%" height="15" fill="rgb(211,99,13)" fg:x="616" fg:w="1"/><text x="17.5875%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.03%)</title><rect x="17.3375%" y="533" width="0.0281%" height="15" fill="rgb(232,111,31)" fg:x="616" fg:w="1"/><text x="17.5875%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.03%)</title><rect x="17.3375%" y="517" width="0.0281%" height="15" fill="rgb(245,82,37)" fg:x="616" fg:w="1"/><text x="17.5875%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.03%)</title><rect x="17.3375%" y="501" width="0.0281%" height="15" fill="rgb(227,149,46)" fg:x="616" fg:w="1"/><text x="17.5875%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="17.3375%" y="485" width="0.0281%" height="15" fill="rgb(218,36,50)" fg:x="616" fg:w="1"/><text x="17.5875%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.03%)</title><rect x="17.3375%" y="469" width="0.0281%" height="15" fill="rgb(226,80,48)" fg:x="616" fg:w="1"/><text x="17.5875%" y="479.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.03%)</title><rect x="17.3375%" y="453" width="0.0281%" height="15" fill="rgb(238,224,15)" fg:x="616" fg:w="1"/><text x="17.5875%" y="463.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.03%)</title><rect x="17.3375%" y="437" width="0.0281%" height="15" fill="rgb(241,136,10)" fg:x="616" fg:w="1"/><text x="17.5875%" y="447.50"></text></g><g><title>__realloc (1 samples, 0.03%)</title><rect x="17.3375%" y="421" width="0.0281%" height="15" fill="rgb(208,32,45)" fg:x="616" fg:w="1"/><text x="17.5875%" y="431.50"></text></g><g><title>_int_realloc (1 samples, 0.03%)</title><rect x="17.3375%" y="405" width="0.0281%" height="15" fill="rgb(207,135,9)" fg:x="616" fg:w="1"/><text x="17.5875%" y="415.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.03%)</title><rect x="17.3375%" y="389" width="0.0281%" height="15" fill="rgb(206,86,44)" fg:x="616" fg:w="1"/><text x="17.5875%" y="399.50"></text></g><g><title>ret_from_fork (25 samples, 0.70%)</title><rect x="17.3656%" y="597" width="0.7036%" height="15" fill="rgb(245,177,15)" fg:x="617" fg:w="25"/><text x="17.6156%" y="607.50"></text></g><g><title>schedule_tail (25 samples, 0.70%)</title><rect x="17.3656%" y="581" width="0.7036%" height="15" fill="rgb(206,64,50)" fg:x="617" fg:w="25"/><text x="17.6156%" y="591.50"></text></g><g><title>finish_task_switch.isra.0 (25 samples, 0.70%)</title><rect x="17.3656%" y="565" width="0.7036%" height="15" fill="rgb(234,36,40)" fg:x="617" fg:w="25"/><text x="17.6156%" y="575.50"></text></g><g><title>__perf_event_task_sched_in (25 samples, 0.70%)</title><rect x="17.3656%" y="549" width="0.7036%" height="15" fill="rgb(213,64,8)" fg:x="617" fg:w="25"/><text x="17.6156%" y="559.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (25 samples, 0.70%)</title><rect x="17.3656%" y="533" width="0.7036%" height="15" fill="rgb(210,75,36)" fg:x="617" fg:w="25"/><text x="17.6156%" y="543.50"></text></g><g><title>native_write_msr (25 samples, 0.70%)</title><rect x="17.3656%" y="517" width="0.7036%" height="15" fill="rgb(229,88,21)" fg:x="617" fg:w="25"/><text x="17.6156%" y="527.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="34.4216%" y="325" width="0.0281%" height="15" fill="rgb(252,204,47)" fg:x="1223" fg:w="1"/><text x="34.6716%" y="335.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="34.4216%" y="309" width="0.0281%" height="15" fill="rgb(208,77,27)" fg:x="1223" fg:w="1"/><text x="34.6716%" y="319.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="34.4216%" y="293" width="0.0281%" height="15" fill="rgb(221,76,26)" fg:x="1223" fg:w="1"/><text x="34.6716%" y="303.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="34.4216%" y="277" width="0.0281%" height="15" fill="rgb(225,139,18)" fg:x="1223" fg:w="1"/><text x="34.6716%" y="287.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="34.4216%" y="261" width="0.0281%" height="15" fill="rgb(230,137,11)" fg:x="1223" fg:w="1"/><text x="34.6716%" y="271.50"></text></g><g><title>tick_sched_timer (1 samples, 0.03%)</title><rect x="34.4216%" y="245" width="0.0281%" height="15" fill="rgb(212,28,1)" fg:x="1223" fg:w="1"/><text x="34.6716%" y="255.50"></text></g><g><title>tick_sched_handle (1 samples, 0.03%)</title><rect x="34.4216%" y="229" width="0.0281%" height="15" fill="rgb(248,164,17)" fg:x="1223" fg:w="1"/><text x="34.6716%" y="239.50"></text></g><g><title>update_process_times (1 samples, 0.03%)</title><rect x="34.4216%" y="213" width="0.0281%" height="15" fill="rgb(222,171,42)" fg:x="1223" fg:w="1"/><text x="34.6716%" y="223.50"></text></g><g><title>rcu_sched_clock_irq (1 samples, 0.03%)</title><rect x="34.4216%" y="197" width="0.0281%" height="15" fill="rgb(243,84,45)" fg:x="1223" fg:w="1"/><text x="34.6716%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (42 samples, 1.18%)</title><rect x="34.4498%" y="325" width="1.1821%" height="15" fill="rgb(252,49,23)" fg:x="1224" fg:w="42"/><text x="34.6998%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (28 samples, 0.79%)</title><rect x="35.6319%" y="325" width="0.7881%" height="15" fill="rgb(215,19,7)" fg:x="1266" fg:w="28"/><text x="35.8819%" y="335.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="36.3918%" y="309" width="0.0281%" height="15" fill="rgb(238,81,41)" fg:x="1293" fg:w="1"/><text x="36.6418%" y="319.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="36.3918%" y="293" width="0.0281%" height="15" fill="rgb(210,199,37)" fg:x="1293" fg:w="1"/><text x="36.6418%" y="303.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="36.3918%" y="277" width="0.0281%" height="15" fill="rgb(244,192,49)" fg:x="1293" fg:w="1"/><text x="36.6418%" y="287.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="36.3918%" y="261" width="0.0281%" height="15" fill="rgb(226,211,11)" fg:x="1293" fg:w="1"/><text x="36.6418%" y="271.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="36.3918%" y="245" width="0.0281%" height="15" fill="rgb(236,162,54)" fg:x="1293" fg:w="1"/><text x="36.6418%" y="255.50"></text></g><g><title>tick_sched_timer (1 samples, 0.03%)</title><rect x="36.3918%" y="229" width="0.0281%" height="15" fill="rgb(220,229,9)" fg:x="1293" fg:w="1"/><text x="36.6418%" y="239.50"></text></g><g><title>tick_sched_handle (1 samples, 0.03%)</title><rect x="36.3918%" y="213" width="0.0281%" height="15" fill="rgb(250,87,22)" fg:x="1293" fg:w="1"/><text x="36.6418%" y="223.50"></text></g><g><title>update_process_times (1 samples, 0.03%)</title><rect x="36.3918%" y="197" width="0.0281%" height="15" fill="rgb(239,43,17)" fg:x="1293" fg:w="1"/><text x="36.6418%" y="207.50"></text></g><g><title>scheduler_tick (1 samples, 0.03%)</title><rect x="36.3918%" y="181" width="0.0281%" height="15" fill="rgb(231,177,25)" fg:x="1293" fg:w="1"/><text x="36.6418%" y="191.50"></text></g><g><title>task_tick_fair (1 samples, 0.03%)</title><rect x="36.3918%" y="165" width="0.0281%" height="15" fill="rgb(219,179,1)" fg:x="1293" fg:w="1"/><text x="36.6418%" y="175.50"></text></g><g><title>update_load_avg (1 samples, 0.03%)</title><rect x="36.3918%" y="149" width="0.0281%" height="15" fill="rgb(238,219,53)" fg:x="1293" fg:w="1"/><text x="36.6418%" y="159.50"></text></g><g><title>__update_load_avg_cfs_rq (1 samples, 0.03%)</title><rect x="36.3918%" y="133" width="0.0281%" height="15" fill="rgb(232,167,36)" fg:x="1293" fg:w="1"/><text x="36.6418%" y="143.50"></text></g><g><title>start_thread (658 samples, 18.52%)</title><rect x="18.0692%" y="597" width="18.5196%" height="15" fill="rgb(244,19,51)" fg:x="642" fg:w="658"/><text x="18.3192%" y="607.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (658 samples, 18.52%)</title><rect x="18.0692%" y="581" width="18.5196%" height="15" fill="rgb(224,6,22)" fg:x="642" fg:w="658"/><text x="18.3192%" y="591.50">std::sys::unix::thread::Threa..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (658 samples, 18.52%)</title><rect x="18.0692%" y="565" width="18.5196%" height="15" fill="rgb(224,145,5)" fg:x="642" fg:w="658"/><text x="18.3192%" y="575.50">&lt;alloc::boxed::Box&lt;F,A&gt; as co..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (658 samples, 18.52%)</title><rect x="18.0692%" y="549" width="18.5196%" height="15" fill="rgb(234,130,49)" fg:x="642" fg:w="658"/><text x="18.3192%" y="559.50">&lt;alloc::boxed::Box&lt;F,A&gt; as co..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (658 samples, 18.52%)</title><rect x="18.0692%" y="533" width="18.5196%" height="15" fill="rgb(254,6,2)" fg:x="642" fg:w="658"/><text x="18.3192%" y="543.50">core::ops::function::FnOnce::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (658 samples, 18.52%)</title><rect x="18.0692%" y="517" width="18.5196%" height="15" fill="rgb(208,96,46)" fg:x="642" fg:w="658"/><text x="18.3192%" y="527.50">std::thread::Builder::spawn_u..</text></g><g><title>std::panic::catch_unwind (658 samples, 18.52%)</title><rect x="18.0692%" y="501" width="18.5196%" height="15" fill="rgb(239,3,39)" fg:x="642" fg:w="658"/><text x="18.3192%" y="511.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (658 samples, 18.52%)</title><rect x="18.0692%" y="485" width="18.5196%" height="15" fill="rgb(233,210,1)" fg:x="642" fg:w="658"/><text x="18.3192%" y="495.50">std::panicking::try</text></g><g><title>__rust_try (658 samples, 18.52%)</title><rect x="18.0692%" y="469" width="18.5196%" height="15" fill="rgb(244,137,37)" fg:x="642" fg:w="658"/><text x="18.3192%" y="479.50">__rust_try</text></g><g><title>std::panicking::try::do_call (658 samples, 18.52%)</title><rect x="18.0692%" y="453" width="18.5196%" height="15" fill="rgb(240,136,2)" fg:x="642" fg:w="658"/><text x="18.3192%" y="463.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (658 samples, 18.52%)</title><rect x="18.0692%" y="437" width="18.5196%" height="15" fill="rgb(239,18,37)" fg:x="642" fg:w="658"/><text x="18.3192%" y="447.50">&lt;core::panic::unwind_safe::As..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (658 samples, 18.52%)</title><rect x="18.0692%" y="421" width="18.5196%" height="15" fill="rgb(218,185,22)" fg:x="642" fg:w="658"/><text x="18.3192%" y="431.50">std::thread::Builder::spawn_u..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (658 samples, 18.52%)</title><rect x="18.0692%" y="405" width="18.5196%" height="15" fill="rgb(225,218,4)" fg:x="642" fg:w="658"/><text x="18.3192%" y="415.50">std::sys_common::backtrace::_..</text></g><g><title>cannoli::handle_client::{{closure}}::{{closure}} (658 samples, 18.52%)</title><rect x="18.0692%" y="389" width="18.5196%" height="15" fill="rgb(230,182,32)" fg:x="642" fg:w="658"/><text x="18.3192%" y="399.50">cannoli::handle_client::{{clo..</text></g><g><title>mempipe::RecvPipe&lt;_,_&gt;::try_recv (658 samples, 18.52%)</title><rect x="18.0692%" y="373" width="18.5196%" height="15" fill="rgb(242,56,43)" fg:x="642" fg:w="658"/><text x="18.3192%" y="383.50">mempipe::RecvPipe&lt;_,_&gt;::try_r..</text></g><g><title>cannoli::handle_client::{{closure}}::{{closure}}::{{closure}} (658 samples, 18.52%)</title><rect x="18.0692%" y="357" width="18.5196%" height="15" fill="rgb(233,99,24)" fg:x="642" fg:w="658"/><text x="18.3192%" y="367.50">cannoli::handle_client::{{clo..</text></g><g><title>cannoli::parse_payload (658 samples, 18.52%)</title><rect x="18.0692%" y="341" width="18.5196%" height="15" fill="rgb(234,209,42)" fg:x="642" fg:w="658"/><text x="18.3192%" y="351.50">cannoli::parse_payload</text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (6 samples, 0.17%)</title><rect x="36.4199%" y="325" width="0.1689%" height="15" fill="rgb(227,7,12)" fg:x="1294" fg:w="6"/><text x="36.6699%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.03%)</title><rect x="36.5888%" y="421" width="0.0281%" height="15" fill="rgb(245,203,43)" fg:x="1300" fg:w="1"/><text x="36.8388%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="36.5888%" y="405" width="0.0281%" height="15" fill="rgb(238,205,33)" fg:x="1300" fg:w="1"/><text x="36.8388%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.03%)</title><rect x="36.5888%" y="389" width="0.0281%" height="15" fill="rgb(231,56,7)" fg:x="1300" fg:w="1"/><text x="36.8388%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.03%)</title><rect x="36.5888%" y="373" width="0.0281%" height="15" fill="rgb(244,186,29)" fg:x="1300" fg:w="1"/><text x="36.8388%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.03%)</title><rect x="36.6169%" y="421" width="0.0281%" height="15" fill="rgb(234,111,31)" fg:x="1301" fg:w="1"/><text x="36.8669%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.03%)</title><rect x="36.6169%" y="405" width="0.0281%" height="15" fill="rgb(241,149,10)" fg:x="1301" fg:w="1"/><text x="36.8669%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.03%)</title><rect x="36.6169%" y="389" width="0.0281%" height="15" fill="rgb(249,206,44)" fg:x="1301" fg:w="1"/><text x="36.8669%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.03%)</title><rect x="36.6169%" y="373" width="0.0281%" height="15" fill="rgb(251,153,30)" fg:x="1301" fg:w="1"/><text x="36.8669%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.03%)</title><rect x="36.6169%" y="357" width="0.0281%" height="15" fill="rgb(239,152,38)" fg:x="1301" fg:w="1"/><text x="36.8669%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="36.6169%" y="341" width="0.0281%" height="15" fill="rgb(249,139,47)" fg:x="1301" fg:w="1"/><text x="36.8669%" y="351.50"></text></g><g><title>charge_memcg (1 samples, 0.03%)</title><rect x="36.7014%" y="277" width="0.0281%" height="15" fill="rgb(244,64,35)" fg:x="1304" fg:w="1"/><text x="36.9514%" y="287.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.03%)</title><rect x="36.7014%" y="261" width="0.0281%" height="15" fill="rgb(216,46,15)" fg:x="1304" fg:w="1"/><text x="36.9514%" y="271.50"></text></g><g><title>__mem_cgroup_charge (2 samples, 0.06%)</title><rect x="36.7014%" y="293" width="0.0563%" height="15" fill="rgb(250,74,19)" fg:x="1304" fg:w="2"/><text x="36.9514%" y="303.50"></text></g><g><title>get_mem_cgroup_from_mm (1 samples, 0.03%)</title><rect x="36.7295%" y="277" width="0.0281%" height="15" fill="rgb(249,42,33)" fg:x="1305" fg:w="1"/><text x="36.9795%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5 samples, 0.14%)</title><rect x="36.6451%" y="421" width="0.1407%" height="15" fill="rgb(242,149,17)" fg:x="1302" fg:w="5"/><text x="36.8951%" y="431.50"></text></g><g><title>core::ptr::write (4 samples, 0.11%)</title><rect x="36.6732%" y="405" width="0.1126%" height="15" fill="rgb(244,29,21)" fg:x="1303" fg:w="4"/><text x="36.9232%" y="415.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4 samples, 0.11%)</title><rect x="36.6732%" y="389" width="0.1126%" height="15" fill="rgb(220,130,37)" fg:x="1303" fg:w="4"/><text x="36.9232%" y="399.50"></text></g><g><title>asm_exc_page_fault (3 samples, 0.08%)</title><rect x="36.7014%" y="373" width="0.0844%" height="15" fill="rgb(211,67,2)" fg:x="1304" fg:w="3"/><text x="36.9514%" y="383.50"></text></g><g><title>exc_page_fault (3 samples, 0.08%)</title><rect x="36.7014%" y="357" width="0.0844%" height="15" fill="rgb(235,68,52)" fg:x="1304" fg:w="3"/><text x="36.9514%" y="367.50"></text></g><g><title>do_user_addr_fault (3 samples, 0.08%)</title><rect x="36.7014%" y="341" width="0.0844%" height="15" fill="rgb(246,142,3)" fg:x="1304" fg:w="3"/><text x="36.9514%" y="351.50"></text></g><g><title>handle_mm_fault (3 samples, 0.08%)</title><rect x="36.7014%" y="325" width="0.0844%" height="15" fill="rgb(241,25,7)" fg:x="1304" fg:w="3"/><text x="36.9514%" y="335.50"></text></g><g><title>__handle_mm_fault (3 samples, 0.08%)</title><rect x="36.7014%" y="309" width="0.0844%" height="15" fill="rgb(242,119,39)" fg:x="1304" fg:w="3"/><text x="36.9514%" y="319.50"></text></g><g><title>vma_alloc_folio (1 samples, 0.03%)</title><rect x="36.7577%" y="293" width="0.0281%" height="15" fill="rgb(241,98,45)" fg:x="1306" fg:w="1"/><text x="37.0077%" y="303.50"></text></g><g><title>__folio_alloc (1 samples, 0.03%)</title><rect x="36.7577%" y="277" width="0.0281%" height="15" fill="rgb(254,28,30)" fg:x="1306" fg:w="1"/><text x="37.0077%" y="287.50"></text></g><g><title>__alloc_pages (1 samples, 0.03%)</title><rect x="36.7577%" y="261" width="0.0281%" height="15" fill="rgb(241,142,54)" fg:x="1306" fg:w="1"/><text x="37.0077%" y="271.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.03%)</title><rect x="36.7577%" y="245" width="0.0281%" height="15" fill="rgb(222,85,15)" fg:x="1306" fg:w="1"/><text x="37.0077%" y="255.50"></text></g><g><title>post_alloc_hook (1 samples, 0.03%)</title><rect x="36.7577%" y="229" width="0.0281%" height="15" fill="rgb(210,85,47)" fg:x="1306" fg:w="1"/><text x="37.0077%" y="239.50"></text></g><g><title>clear_page_erms (1 samples, 0.03%)</title><rect x="36.7577%" y="213" width="0.0281%" height="15" fill="rgb(224,206,25)" fg:x="1306" fg:w="1"/><text x="37.0077%" y="223.50"></text></g><g><title>std::panicking::try (8 samples, 0.23%)</title><rect x="36.5888%" y="597" width="0.2252%" height="15" fill="rgb(243,201,19)" fg:x="1300" fg:w="8"/><text x="36.8388%" y="607.50"></text></g><g><title>__rust_try (8 samples, 0.23%)</title><rect x="36.5888%" y="581" width="0.2252%" height="15" fill="rgb(236,59,4)" fg:x="1300" fg:w="8"/><text x="36.8388%" y="591.50"></text></g><g><title>std::panicking::try::do_call (8 samples, 0.23%)</title><rect x="36.5888%" y="565" width="0.2252%" height="15" fill="rgb(254,179,45)" fg:x="1300" fg:w="8"/><text x="36.8388%" y="575.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (8 samples, 0.23%)</title><rect x="36.5888%" y="549" width="0.2252%" height="15" fill="rgb(226,14,10)" fg:x="1300" fg:w="8"/><text x="36.8388%" y="559.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (8 samples, 0.23%)</title><rect x="36.5888%" y="533" width="0.2252%" height="15" fill="rgb(244,27,41)" fg:x="1300" fg:w="8"/><text x="36.8388%" y="543.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (8 samples, 0.23%)</title><rect x="36.5888%" y="517" width="0.2252%" height="15" fill="rgb(235,35,32)" fg:x="1300" fg:w="8"/><text x="36.8388%" y="527.50"></text></g><g><title>cannoli::handle_client::{{closure}}::{{closure}} (8 samples, 0.23%)</title><rect x="36.5888%" y="501" width="0.2252%" height="15" fill="rgb(218,68,31)" fg:x="1300" fg:w="8"/><text x="36.8388%" y="511.50"></text></g><g><title>mempipe::RecvPipe&lt;_,_&gt;::try_recv (8 samples, 0.23%)</title><rect x="36.5888%" y="485" width="0.2252%" height="15" fill="rgb(207,120,37)" fg:x="1300" fg:w="8"/><text x="36.8388%" y="495.50"></text></g><g><title>cannoli::handle_client::{{closure}}::{{closure}}::{{closure}} (8 samples, 0.23%)</title><rect x="36.5888%" y="469" width="0.2252%" height="15" fill="rgb(227,98,0)" fg:x="1300" fg:w="8"/><text x="36.8388%" y="479.50"></text></g><g><title>cannoli::parse_payload (8 samples, 0.23%)</title><rect x="36.5888%" y="453" width="0.2252%" height="15" fill="rgb(207,7,3)" fg:x="1300" fg:w="8"/><text x="36.8388%" y="463.50"></text></g><g><title>&lt;cantracer::CanTracer as cannoli::Cannoli&gt;::exec (8 samples, 0.23%)</title><rect x="36.5888%" y="437" width="0.2252%" height="15" fill="rgb(206,98,19)" fg:x="1300" fg:w="8"/><text x="36.8388%" y="447.50"></text></g><g><title>yaxpeax_x86::long_mode::InstDecoder::decode_slice (1 samples, 0.03%)</title><rect x="36.7858%" y="421" width="0.0281%" height="15" fill="rgb(217,5,26)" fg:x="1307" fg:w="1"/><text x="37.0358%" y="431.50"></text></g><g><title>yaxpeax_arch::reader::U8Reader::new (1 samples, 0.03%)</title><rect x="36.7858%" y="405" width="0.0281%" height="15" fill="rgb(235,190,38)" fg:x="1307" fg:w="1"/><text x="37.0358%" y="415.50"></text></g><g><title>&lt;cantracer::CanTracer as cannoli::Cannoli&gt;::write (2 samples, 0.06%)</title><rect x="36.8140%" y="341" width="0.0563%" height="15" fill="rgb(247,86,24)" fg:x="1308" fg:w="2"/><text x="37.0640%" y="351.50"></text></g><g><title>cannoli::Cannoli::read (2 samples, 0.06%)</title><rect x="36.8703%" y="341" width="0.0563%" height="15" fill="rgb(205,101,16)" fg:x="1310" fg:w="2"/><text x="37.1203%" y="351.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="41.3453%" y="325" width="0.0281%" height="15" fill="rgb(246,168,33)" fg:x="1469" fg:w="1"/><text x="41.5953%" y="335.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="41.3453%" y="309" width="0.0281%" height="15" fill="rgb(231,114,1)" fg:x="1469" fg:w="1"/><text x="41.5953%" y="319.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="41.3453%" y="293" width="0.0281%" height="15" fill="rgb(207,184,53)" fg:x="1469" fg:w="1"/><text x="41.5953%" y="303.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="41.3453%" y="277" width="0.0281%" height="15" fill="rgb(224,95,51)" fg:x="1469" fg:w="1"/><text x="41.5953%" y="287.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="41.3453%" y="261" width="0.0281%" height="15" fill="rgb(212,188,45)" fg:x="1469" fg:w="1"/><text x="41.5953%" y="271.50"></text></g><g><title>tick_sched_timer (1 samples, 0.03%)</title><rect x="41.3453%" y="245" width="0.0281%" height="15" fill="rgb(223,154,38)" fg:x="1469" fg:w="1"/><text x="41.5953%" y="255.50"></text></g><g><title>tick_sched_handle (1 samples, 0.03%)</title><rect x="41.3453%" y="229" width="0.0281%" height="15" fill="rgb(251,22,52)" fg:x="1469" fg:w="1"/><text x="41.5953%" y="239.50"></text></g><g><title>update_process_times (1 samples, 0.03%)</title><rect x="41.3453%" y="213" width="0.0281%" height="15" fill="rgb(229,209,22)" fg:x="1469" fg:w="1"/><text x="41.5953%" y="223.50"></text></g><g><title>scheduler_tick (1 samples, 0.03%)</title><rect x="41.3453%" y="197" width="0.0281%" height="15" fill="rgb(234,138,34)" fg:x="1469" fg:w="1"/><text x="41.5953%" y="207.50"></text></g><g><title>task_tick_fair (1 samples, 0.03%)</title><rect x="41.3453%" y="181" width="0.0281%" height="15" fill="rgb(212,95,11)" fg:x="1469" fg:w="1"/><text x="41.5953%" y="191.50"></text></g><g><title>update_curr (1 samples, 0.03%)</title><rect x="41.3453%" y="165" width="0.0281%" height="15" fill="rgb(240,179,47)" fg:x="1469" fg:w="1"/><text x="41.5953%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (124 samples, 3.49%)</title><rect x="41.3735%" y="325" width="3.4900%" height="15" fill="rgb(240,163,11)" fg:x="1470" fg:w="124"/><text x="41.6235%" y="335.50">cor..</text></g><g><title>asm_exc_page_fault (1 samples, 0.03%)</title><rect x="44.8354%" y="309" width="0.0281%" height="15" fill="rgb(236,37,12)" fg:x="1593" fg:w="1"/><text x="45.0854%" y="319.50"></text></g><g><title>exc_page_fault (1 samples, 0.03%)</title><rect x="44.8354%" y="293" width="0.0281%" height="15" fill="rgb(232,164,16)" fg:x="1593" fg:w="1"/><text x="45.0854%" y="303.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="44.8354%" y="277" width="0.0281%" height="15" fill="rgb(244,205,15)" fg:x="1593" fg:w="1"/><text x="45.0854%" y="287.50"></text></g><g><title>handle_mm_fault (1 samples, 0.03%)</title><rect x="44.8354%" y="261" width="0.0281%" height="15" fill="rgb(223,117,47)" fg:x="1593" fg:w="1"/><text x="45.0854%" y="271.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.03%)</title><rect x="44.8354%" y="245" width="0.0281%" height="15" fill="rgb(244,107,35)" fg:x="1593" fg:w="1"/><text x="45.0854%" y="255.50"></text></g><g><title>do_fault (1 samples, 0.03%)</title><rect x="44.8354%" y="229" width="0.0281%" height="15" fill="rgb(205,140,8)" fg:x="1593" fg:w="1"/><text x="45.0854%" y="239.50"></text></g><g><title>filemap_map_pages (1 samples, 0.03%)</title><rect x="44.8354%" y="213" width="0.0281%" height="15" fill="rgb(228,84,46)" fg:x="1593" fg:w="1"/><text x="45.0854%" y="223.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.03%)</title><rect x="44.8354%" y="197" width="0.0281%" height="15" fill="rgb(254,188,9)" fg:x="1593" fg:w="1"/><text x="45.0854%" y="207.50"></text></g><g><title>preempt_count_add (1 samples, 0.03%)</title><rect x="44.8354%" y="181" width="0.0281%" height="15" fill="rgb(206,112,54)" fg:x="1593" fg:w="1"/><text x="45.0854%" y="191.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (40 samples, 1.13%)</title><rect x="44.8635%" y="325" width="1.1258%" height="15" fill="rgb(216,84,49)" fg:x="1594" fg:w="40"/><text x="45.1135%" y="335.50"></text></g><g><title>core::ptr::read_unaligned (323 samples, 9.09%)</title><rect x="36.9265%" y="341" width="9.0909%" height="15" fill="rgb(214,194,35)" fg:x="1312" fg:w="323"/><text x="37.1765%" y="351.50">core::ptr::re..</text></g><g><title>core::mem::size_of (1 samples, 0.03%)</title><rect x="45.9893%" y="325" width="0.0281%" height="15" fill="rgb(249,28,3)" fg:x="1634" fg:w="1"/><text x="46.2393%" y="335.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (453 samples, 12.75%)</title><rect x="36.8140%" y="597" width="12.7498%" height="15" fill="rgb(222,56,52)" fg:x="1308" fg:w="453"/><text x="37.0640%" y="607.50">std::sys::unix::thr..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (453 samples, 12.75%)</title><rect x="36.8140%" y="581" width="12.7498%" height="15" fill="rgb(245,217,50)" fg:x="1308" fg:w="453"/><text x="37.0640%" y="591.50">&lt;alloc::boxed::Box&lt;..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (453 samples, 12.75%)</title><rect x="36.8140%" y="565" width="12.7498%" height="15" fill="rgb(213,201,24)" fg:x="1308" fg:w="453"/><text x="37.0640%" y="575.50">&lt;alloc::boxed::Box&lt;..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (453 samples, 12.75%)</title><rect x="36.8140%" y="549" width="12.7498%" height="15" fill="rgb(248,116,28)" fg:x="1308" fg:w="453"/><text x="37.0640%" y="559.50">core::ops::function..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (453 samples, 12.75%)</title><rect x="36.8140%" y="533" width="12.7498%" height="15" fill="rgb(219,72,43)" fg:x="1308" fg:w="453"/><text x="37.0640%" y="543.50">std::thread::Builde..</text></g><g><title>std::panic::catch_unwind (453 samples, 12.75%)</title><rect x="36.8140%" y="517" width="12.7498%" height="15" fill="rgb(209,138,14)" fg:x="1308" fg:w="453"/><text x="37.0640%" y="527.50">std::panic::catch_u..</text></g><g><title>std::panicking::try (453 samples, 12.75%)</title><rect x="36.8140%" y="501" width="12.7498%" height="15" fill="rgb(222,18,33)" fg:x="1308" fg:w="453"/><text x="37.0640%" y="511.50">std::panicking::try</text></g><g><title>__rust_try (453 samples, 12.75%)</title><rect x="36.8140%" y="485" width="12.7498%" height="15" fill="rgb(213,199,7)" fg:x="1308" fg:w="453"/><text x="37.0640%" y="495.50">__rust_try</text></g><g><title>std::panicking::try::do_call (453 samples, 12.75%)</title><rect x="36.8140%" y="469" width="12.7498%" height="15" fill="rgb(250,110,10)" fg:x="1308" fg:w="453"/><text x="37.0640%" y="479.50">std::panicking::try..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (453 samples, 12.75%)</title><rect x="36.8140%" y="453" width="12.7498%" height="15" fill="rgb(248,123,6)" fg:x="1308" fg:w="453"/><text x="37.0640%" y="463.50">&lt;core::panic::unwin..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (453 samples, 12.75%)</title><rect x="36.8140%" y="437" width="12.7498%" height="15" fill="rgb(206,91,31)" fg:x="1308" fg:w="453"/><text x="37.0640%" y="447.50">std::thread::Builde..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (453 samples, 12.75%)</title><rect x="36.8140%" y="421" width="12.7498%" height="15" fill="rgb(211,154,13)" fg:x="1308" fg:w="453"/><text x="37.0640%" y="431.50">std::sys_common::ba..</text></g><g><title>cannoli::handle_client::{{closure}}::{{closure}} (453 samples, 12.75%)</title><rect x="36.8140%" y="405" width="12.7498%" height="15" fill="rgb(225,148,7)" fg:x="1308" fg:w="453"/><text x="37.0640%" y="415.50">cannoli::handle_cli..</text></g><g><title>mempipe::RecvPipe&lt;_,_&gt;::try_recv (453 samples, 12.75%)</title><rect x="36.8140%" y="389" width="12.7498%" height="15" fill="rgb(220,160,43)" fg:x="1308" fg:w="453"/><text x="37.0640%" y="399.50">mempipe::RecvPipe&lt;_..</text></g><g><title>cannoli::handle_client::{{closure}}::{{closure}}::{{closure}} (453 samples, 12.75%)</title><rect x="36.8140%" y="373" width="12.7498%" height="15" fill="rgb(213,52,39)" fg:x="1308" fg:w="453"/><text x="37.0640%" y="383.50">cannoli::handle_cli..</text></g><g><title>cannoli::parse_payload (453 samples, 12.75%)</title><rect x="36.8140%" y="357" width="12.7498%" height="15" fill="rgb(243,137,7)" fg:x="1308" fg:w="453"/><text x="37.0640%" y="367.50">cannoli::parse_payl..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (126 samples, 3.55%)</title><rect x="46.0175%" y="341" width="3.5463%" height="15" fill="rgb(230,79,13)" fg:x="1635" fg:w="126"/><text x="46.2675%" y="351.50">core..</text></g><g><title>asm_sysvec_apic_timer_interrupt (5 samples, 0.14%)</title><rect x="49.4230%" y="325" width="0.1407%" height="15" fill="rgb(247,105,23)" fg:x="1756" fg:w="5"/><text x="49.6730%" y="335.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.14%)</title><rect x="49.4230%" y="309" width="0.1407%" height="15" fill="rgb(223,179,41)" fg:x="1756" fg:w="5"/><text x="49.6730%" y="319.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.14%)</title><rect x="49.4230%" y="293" width="0.1407%" height="15" fill="rgb(218,9,34)" fg:x="1756" fg:w="5"/><text x="49.6730%" y="303.50"></text></g><g><title>schedule (5 samples, 0.14%)</title><rect x="49.4230%" y="277" width="0.1407%" height="15" fill="rgb(222,106,8)" fg:x="1756" fg:w="5"/><text x="49.6730%" y="287.50"></text></g><g><title>__schedule (5 samples, 0.14%)</title><rect x="49.4230%" y="261" width="0.1407%" height="15" fill="rgb(211,220,0)" fg:x="1756" fg:w="5"/><text x="49.6730%" y="271.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.14%)</title><rect x="49.4230%" y="245" width="0.1407%" height="15" fill="rgb(229,52,16)" fg:x="1756" fg:w="5"/><text x="49.6730%" y="255.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.14%)</title><rect x="49.4230%" y="229" width="0.1407%" height="15" fill="rgb(212,155,18)" fg:x="1756" fg:w="5"/><text x="49.6730%" y="239.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 0.14%)</title><rect x="49.4230%" y="213" width="0.1407%" height="15" fill="rgb(242,21,14)" fg:x="1756" fg:w="5"/><text x="49.6730%" y="223.50"></text></g><g><title>native_write_msr (5 samples, 0.14%)</title><rect x="49.4230%" y="197" width="0.1407%" height="15" fill="rgb(222,19,48)" fg:x="1756" fg:w="5"/><text x="49.6730%" y="207.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (6 samples, 0.17%)</title><rect x="49.5637%" y="597" width="0.1689%" height="15" fill="rgb(232,45,27)" fg:x="1761" fg:w="6"/><text x="49.8137%" y="607.50"></text></g><g><title>cannoli::handle_client::{{closure}}::{{closure}} (6 samples, 0.17%)</title><rect x="49.5637%" y="581" width="0.1689%" height="15" fill="rgb(249,103,42)" fg:x="1761" fg:w="6"/><text x="49.8137%" y="591.50"></text></g><g><title>mempipe::RecvPipe&lt;_,_&gt;::try_recv (6 samples, 0.17%)</title><rect x="49.5637%" y="565" width="0.1689%" height="15" fill="rgb(246,81,33)" fg:x="1761" fg:w="6"/><text x="49.8137%" y="575.50"></text></g><g><title>cannoli::handle_client::{{closure}}::{{closure}}::{{closure}} (6 samples, 0.17%)</title><rect x="49.5637%" y="549" width="0.1689%" height="15" fill="rgb(252,33,42)" fg:x="1761" fg:w="6"/><text x="49.8137%" y="559.50"></text></g><g><title>cannoli::parse_payload (6 samples, 0.17%)</title><rect x="49.5637%" y="533" width="0.1689%" height="15" fill="rgb(209,212,41)" fg:x="1761" fg:w="6"/><text x="49.8137%" y="543.50"></text></g><g><title>&lt;cantracer::CanTracer as cannoli::Cannoli&gt;::exec (6 samples, 0.17%)</title><rect x="49.5637%" y="517" width="0.1689%" height="15" fill="rgb(207,154,6)" fg:x="1761" fg:w="6"/><text x="49.8137%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (6 samples, 0.17%)</title><rect x="49.5637%" y="501" width="0.1689%" height="15" fill="rgb(223,64,47)" fg:x="1761" fg:w="6"/><text x="49.8137%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6 samples, 0.17%)</title><rect x="49.5637%" y="485" width="0.1689%" height="15" fill="rgb(211,161,38)" fg:x="1761" fg:w="6"/><text x="49.8137%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.17%)</title><rect x="49.5637%" y="469" width="0.1689%" height="15" fill="rgb(219,138,40)" fg:x="1761" fg:w="6"/><text x="49.8137%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6 samples, 0.17%)</title><rect x="49.5637%" y="453" width="0.1689%" height="15" fill="rgb(241,228,46)" fg:x="1761" fg:w="6"/><text x="49.8137%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6 samples, 0.17%)</title><rect x="49.5637%" y="437" width="0.1689%" height="15" fill="rgb(223,209,38)" fg:x="1761" fg:w="6"/><text x="49.8137%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.17%)</title><rect x="49.5637%" y="421" width="0.1689%" height="15" fill="rgb(236,164,45)" fg:x="1761" fg:w="6"/><text x="49.8137%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.17%)</title><rect x="49.5637%" y="405" width="0.1689%" height="15" fill="rgb(231,15,5)" fg:x="1761" fg:w="6"/><text x="49.8137%" y="415.50"></text></g><g><title>core::alloc::layout::Layout::array (6 samples, 0.17%)</title><rect x="49.5637%" y="389" width="0.1689%" height="15" fill="rgb(252,35,15)" fg:x="1761" fg:w="6"/><text x="49.8137%" y="399.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (6 samples, 0.17%)</title><rect x="49.5637%" y="373" width="0.1689%" height="15" fill="rgb(248,181,18)" fg:x="1761" fg:w="6"/><text x="49.8137%" y="383.50"></text></g><g><title>core::alloc::layout::Layout::max_size_for_align (1 samples, 0.03%)</title><rect x="49.7045%" y="357" width="0.0281%" height="15" fill="rgb(233,39,42)" fg:x="1766" fg:w="1"/><text x="49.9545%" y="367.50"></text></g><g><title>core::mem::valid_align::ValidAlign::as_usize (1 samples, 0.03%)</title><rect x="49.7045%" y="341" width="0.0281%" height="15" fill="rgb(238,110,33)" fg:x="1766" fg:w="1"/><text x="49.9545%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.03%)</title><rect x="50.4081%" y="389" width="0.0281%" height="15" fill="rgb(233,195,10)" fg:x="1791" fg:w="1"/><text x="50.6581%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.03%)</title><rect x="50.4081%" y="373" width="0.0281%" height="15" fill="rgb(254,105,3)" fg:x="1791" fg:w="1"/><text x="50.6581%" y="383.50"></text></g><g><title>&lt;cantracer::CanTracer as cannoli::Cannoli&gt;::exec (88 samples, 2.48%)</title><rect x="49.7326%" y="405" width="2.4768%" height="15" fill="rgb(221,225,9)" fg:x="1767" fg:w="88"/><text x="49.9826%" y="415.50">&lt;c..</text></g><g><title>cantracer::CanTracerContext::translate (63 samples, 1.77%)</title><rect x="50.4363%" y="389" width="1.7731%" height="15" fill="rgb(224,227,45)" fg:x="1792" fg:w="63"/><text x="50.6863%" y="399.50">c..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (96 samples, 2.70%)</title><rect x="52.2094%" y="405" width="2.7019%" height="15" fill="rgb(229,198,43)" fg:x="1855" fg:w="96"/><text x="52.4594%" y="415.50">&lt;c..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (60 samples, 1.69%)</title><rect x="62.5387%" y="341" width="1.6887%" height="15" fill="rgb(206,209,35)" fg:x="2222" fg:w="60"/><text x="62.7887%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (46 samples, 1.29%)</title><rect x="62.9327%" y="325" width="1.2947%" height="15" fill="rgb(245,195,53)" fg:x="2236" fg:w="46"/><text x="63.1827%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const [T]&gt;::as_ptr (11 samples, 0.31%)</title><rect x="64.2274%" y="341" width="0.3096%" height="15" fill="rgb(240,92,26)" fg:x="2282" fg:w="11"/><text x="64.4774%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::cast (8 samples, 0.23%)</title><rect x="65.3814%" y="325" width="0.2252%" height="15" fill="rgb(207,40,23)" fg:x="2323" fg:w="8"/><text x="65.6314%" y="335.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (631 samples, 17.76%)</title><rect x="49.7326%" y="597" width="17.7596%" height="15" fill="rgb(223,111,35)" fg:x="1767" fg:w="631"/><text x="49.9826%" y="607.50">std::thread::Builder::spawn_..</text></g><g><title>std::panic::catch_unwind (631 samples, 17.76%)</title><rect x="49.7326%" y="581" width="17.7596%" height="15" fill="rgb(229,147,28)" fg:x="1767" fg:w="631"/><text x="49.9826%" y="591.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (631 samples, 17.76%)</title><rect x="49.7326%" y="565" width="17.7596%" height="15" fill="rgb(211,29,28)" fg:x="1767" fg:w="631"/><text x="49.9826%" y="575.50">std::panicking::try</text></g><g><title>__rust_try (631 samples, 17.76%)</title><rect x="49.7326%" y="549" width="17.7596%" height="15" fill="rgb(228,72,33)" fg:x="1767" fg:w="631"/><text x="49.9826%" y="559.50">__rust_try</text></g><g><title>std::panicking::try::do_call (631 samples, 17.76%)</title><rect x="49.7326%" y="533" width="17.7596%" height="15" fill="rgb(205,214,31)" fg:x="1767" fg:w="631"/><text x="49.9826%" y="543.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (631 samples, 17.76%)</title><rect x="49.7326%" y="517" width="17.7596%" height="15" fill="rgb(224,111,15)" fg:x="1767" fg:w="631"/><text x="49.9826%" y="527.50">&lt;core::panic::unwind_safe::A..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (631 samples, 17.76%)</title><rect x="49.7326%" y="501" width="17.7596%" height="15" fill="rgb(253,21,26)" fg:x="1767" fg:w="631"/><text x="49.9826%" y="511.50">std::thread::Builder::spawn_..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (631 samples, 17.76%)</title><rect x="49.7326%" y="485" width="17.7596%" height="15" fill="rgb(245,139,43)" fg:x="1767" fg:w="631"/><text x="49.9826%" y="495.50">std::sys_common::backtrace::..</text></g><g><title>cannoli::handle_client::{{closure}}::{{closure}} (631 samples, 17.76%)</title><rect x="49.7326%" y="469" width="17.7596%" height="15" fill="rgb(252,170,7)" fg:x="1767" fg:w="631"/><text x="49.9826%" y="479.50">cannoli::handle_client::{{cl..</text></g><g><title>mempipe::RecvPipe&lt;_,_&gt;::try_recv (631 samples, 17.76%)</title><rect x="49.7326%" y="453" width="17.7596%" height="15" fill="rgb(231,118,14)" fg:x="1767" fg:w="631"/><text x="49.9826%" y="463.50">mempipe::RecvPipe&lt;_,_&gt;::try_..</text></g><g><title>cannoli::handle_client::{{closure}}::{{closure}}::{{closure}} (631 samples, 17.76%)</title><rect x="49.7326%" y="437" width="17.7596%" height="15" fill="rgb(238,83,0)" fg:x="1767" fg:w="631"/><text x="49.9826%" y="447.50">cannoli::handle_client::{{cl..</text></g><g><title>cannoli::parse_payload (631 samples, 17.76%)</title><rect x="49.7326%" y="421" width="17.7596%" height="15" fill="rgb(221,39,39)" fg:x="1767" fg:w="631"/><text x="49.9826%" y="431.50">cannoli::parse_payload</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (447 samples, 12.58%)</title><rect x="54.9113%" y="405" width="12.5809%" height="15" fill="rgb(222,119,46)" fg:x="1951" fg:w="447"/><text x="55.1613%" y="415.50">core::slice::&lt;impl ..</text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (447 samples, 12.58%)</title><rect x="54.9113%" y="389" width="12.5809%" height="15" fill="rgb(222,165,49)" fg:x="1951" fg:w="447"/><text x="55.1613%" y="399.50">&lt;core::ops::range::..</text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (447 samples, 12.58%)</title><rect x="54.9113%" y="373" width="12.5809%" height="15" fill="rgb(219,113,52)" fg:x="1951" fg:w="447"/><text x="55.1613%" y="383.50">&lt;core::ops::range::..</text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (218 samples, 6.14%)</title><rect x="61.3566%" y="357" width="6.1357%" height="15" fill="rgb(214,7,15)" fg:x="2180" fg:w="218"/><text x="61.6066%" y="367.50">&lt;core::o..</text></g><g><title>core::ptr::slice_from_raw_parts (105 samples, 2.96%)</title><rect x="64.5370%" y="341" width="2.9552%" height="15" fill="rgb(235,32,4)" fg:x="2293" fg:w="105"/><text x="64.7870%" y="351.50">cor..</text></g><g><title>core::ptr::metadata::from_raw_parts (67 samples, 1.89%)</title><rect x="65.6065%" y="325" width="1.8857%" height="15" fill="rgb(238,90,54)" fg:x="2331" fg:w="67"/><text x="65.8565%" y="335.50">c..</text></g><g><title>cantracer (2,399 samples, 67.52%)</title><rect x="0.0000%" y="613" width="67.5204%" height="15" fill="rgb(213,208,19)" fg:x="0" fg:w="2399"/><text x="0.2500%" y="623.50">cantracer</text></g><g><title>yaxpeax_x86::long_mode::read_num::{{closure}} (1 samples, 0.03%)</title><rect x="67.4923%" y="597" width="0.0281%" height="15" fill="rgb(233,156,4)" fg:x="2398" fg:w="1"/><text x="67.7423%" y="607.50"></text></g><g><title>perf-exec (5 samples, 0.14%)</title><rect x="67.5204%" y="613" width="0.1407%" height="15" fill="rgb(207,194,5)" fg:x="2399" fg:w="5"/><text x="67.7704%" y="623.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.14%)</title><rect x="67.5204%" y="597" width="0.1407%" height="15" fill="rgb(206,111,30)" fg:x="2399" fg:w="5"/><text x="67.7704%" y="607.50"></text></g><g><title>do_syscall_64 (5 samples, 0.14%)</title><rect x="67.5204%" y="581" width="0.1407%" height="15" fill="rgb(243,70,54)" fg:x="2399" fg:w="5"/><text x="67.7704%" y="591.50"></text></g><g><title>__x64_sys_execve (5 samples, 0.14%)</title><rect x="67.5204%" y="565" width="0.1407%" height="15" fill="rgb(242,28,8)" fg:x="2399" fg:w="5"/><text x="67.7704%" y="575.50"></text></g><g><title>do_execveat_common.isra.0 (5 samples, 0.14%)</title><rect x="67.5204%" y="549" width="0.1407%" height="15" fill="rgb(219,106,18)" fg:x="2399" fg:w="5"/><text x="67.7704%" y="559.50"></text></g><g><title>bprm_execve (5 samples, 0.14%)</title><rect x="67.5204%" y="533" width="0.1407%" height="15" fill="rgb(244,222,10)" fg:x="2399" fg:w="5"/><text x="67.7704%" y="543.50"></text></g><g><title>load_elf_binary (5 samples, 0.14%)</title><rect x="67.5204%" y="517" width="0.1407%" height="15" fill="rgb(236,179,52)" fg:x="2399" fg:w="5"/><text x="67.7704%" y="527.50"></text></g><g><title>begin_new_exec (5 samples, 0.14%)</title><rect x="67.5204%" y="501" width="0.1407%" height="15" fill="rgb(213,23,39)" fg:x="2399" fg:w="5"/><text x="67.7704%" y="511.50"></text></g><g><title>perf_event_exec (5 samples, 0.14%)</title><rect x="67.5204%" y="485" width="0.1407%" height="15" fill="rgb(238,48,10)" fg:x="2399" fg:w="5"/><text x="67.7704%" y="495.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 0.14%)</title><rect x="67.5204%" y="469" width="0.1407%" height="15" fill="rgb(251,196,23)" fg:x="2399" fg:w="5"/><text x="67.7704%" y="479.50"></text></g><g><title>native_write_msr (5 samples, 0.14%)</title><rect x="67.5204%" y="453" width="0.1407%" height="15" fill="rgb(250,152,24)" fg:x="2399" fg:w="5"/><text x="67.7704%" y="463.50"></text></g><g><title>cpu_handle_exception (1 samples, 0.03%)</title><rect x="67.6611%" y="501" width="0.0281%" height="15" fill="rgb(209,150,17)" fg:x="2404" fg:w="1"/><text x="67.9111%" y="511.50"></text></g><g><title>CPU_GET_CLASS (1 samples, 0.03%)</title><rect x="67.6611%" y="485" width="0.0281%" height="15" fill="rgb(234,202,34)" fg:x="2404" fg:w="1"/><text x="67.9111%" y="495.50"></text></g><g><title>object_class_dynamic_cast_assert (1 samples, 0.03%)</title><rect x="67.6611%" y="469" width="0.0281%" height="15" fill="rgb(253,148,53)" fg:x="2404" fg:w="1"/><text x="67.9111%" y="479.50"></text></g><g><title>cpu_handle_interrupt (1 samples, 0.03%)</title><rect x="67.6893%" y="501" width="0.0281%" height="15" fill="rgb(218,129,16)" fg:x="2405" fg:w="1"/><text x="67.9393%" y="511.50"></text></g><g><title>gen_intermediate_code (3 samples, 0.08%)</title><rect x="67.7174%" y="485" width="0.0844%" height="15" fill="rgb(216,85,19)" fg:x="2406" fg:w="3"/><text x="67.9674%" y="495.50"></text></g><g><title>translator_loop (3 samples, 0.08%)</title><rect x="67.7174%" y="469" width="0.0844%" height="15" fill="rgb(235,228,7)" fg:x="2406" fg:w="3"/><text x="67.9674%" y="479.50"></text></g><g><title>i386_tr_translate_insn (3 samples, 0.08%)</title><rect x="67.7174%" y="453" width="0.0844%" height="15" fill="rgb(245,175,0)" fg:x="2406" fg:w="3"/><text x="67.9674%" y="463.50"></text></g><g><title>disas_insn (3 samples, 0.08%)</title><rect x="67.7174%" y="437" width="0.0844%" height="15" fill="rgb(208,168,36)" fg:x="2406" fg:w="3"/><text x="67.9674%" y="447.50"></text></g><g><title>gen_jr (1 samples, 0.03%)</title><rect x="67.7737%" y="421" width="0.0281%" height="15" fill="rgb(246,171,24)" fg:x="2408" fg:w="1"/><text x="68.0237%" y="431.50"></text></g><g><title>do_gen_eob_worker (1 samples, 0.03%)</title><rect x="67.7737%" y="405" width="0.0281%" height="15" fill="rgb(215,142,24)" fg:x="2408" fg:w="1"/><text x="68.0237%" y="415.50"></text></g><g><title>tcg_gen_lookup_and_goto_ptr (1 samples, 0.03%)</title><rect x="67.7737%" y="389" width="0.0281%" height="15" fill="rgb(250,187,7)" fg:x="2408" fg:w="1"/><text x="68.0237%" y="399.50"></text></g><g><title>tcg_temp_new_i64 (1 samples, 0.03%)</title><rect x="67.7737%" y="373" width="0.0281%" height="15" fill="rgb(228,66,33)" fg:x="2408" fg:w="1"/><text x="68.0237%" y="383.50"></text></g><g><title>tcg_temp_new_internal (1 samples, 0.03%)</title><rect x="67.7737%" y="357" width="0.0281%" height="15" fill="rgb(234,215,21)" fg:x="2408" fg:w="1"/><text x="68.0237%" y="367.50"></text></g><g><title>tcg_temp_alloc (1 samples, 0.03%)</title><rect x="67.7737%" y="341" width="0.0281%" height="15" fill="rgb(222,191,20)" fg:x="2408" fg:w="1"/><text x="68.0237%" y="351.50"></text></g><g><title>lift_instruction64 (2 samples, 0.06%)</title><rect x="67.8019%" y="469" width="0.0563%" height="15" fill="rgb(245,79,54)" fg:x="2409" fg:w="2"/><text x="68.0519%" y="479.50"></text></g><g><title>jitter::cannoli_internals::patch (2 samples, 0.06%)</title><rect x="67.8019%" y="453" width="0.0563%" height="15" fill="rgb(240,10,37)" fg:x="2409" fg:w="2"/><text x="68.0519%" y="463.50"></text></g><g><title>la_bb_end (1 samples, 0.03%)</title><rect x="67.9144%" y="453" width="0.0281%" height="15" fill="rgb(214,192,32)" fg:x="2413" fg:w="1"/><text x="68.1644%" y="463.50"></text></g><g><title>la_reset_pref (1 samples, 0.03%)</title><rect x="67.9144%" y="437" width="0.0281%" height="15" fill="rgb(209,36,54)" fg:x="2413" fg:w="1"/><text x="68.1644%" y="447.50"></text></g><g><title>liveness_pass_1 (4 samples, 0.11%)</title><rect x="67.8581%" y="469" width="0.1126%" height="15" fill="rgb(220,10,11)" fg:x="2411" fg:w="4"/><text x="68.1081%" y="479.50"></text></g><g><title>la_func_end (1 samples, 0.03%)</title><rect x="67.9426%" y="453" width="0.0281%" height="15" fill="rgb(221,106,17)" fg:x="2414" fg:w="1"/><text x="68.1926%" y="463.50"></text></g><g><title>la_reset_pref (1 samples, 0.03%)</title><rect x="67.9426%" y="437" width="0.0281%" height="15" fill="rgb(251,142,44)" fg:x="2414" fg:w="1"/><text x="68.1926%" y="447.50"></text></g><g><title>tcg_current_code_size (1 samples, 0.03%)</title><rect x="67.9707%" y="469" width="0.0281%" height="15" fill="rgb(238,13,15)" fg:x="2415" fg:w="1"/><text x="68.2207%" y="479.50"></text></g><g><title>tcg_ptr_byte_diff (1 samples, 0.03%)</title><rect x="67.9707%" y="453" width="0.0281%" height="15" fill="rgb(208,107,27)" fg:x="2415" fg:w="1"/><text x="68.2207%" y="463.50"></text></g><g><title>tcg_out_op (1 samples, 0.03%)</title><rect x="68.0270%" y="453" width="0.0281%" height="15" fill="rgb(205,136,37)" fg:x="2417" fg:w="1"/><text x="68.2770%" y="463.50"></text></g><g><title>jitter::cannoli_internals::lift_memop64 (1 samples, 0.03%)</title><rect x="68.0552%" y="437" width="0.0281%" height="15" fill="rgb(250,205,27)" fg:x="2418" fg:w="1"/><text x="68.3052%" y="447.50"></text></g><g><title>jitter::cannoli_internals::patch (1 samples, 0.03%)</title><rect x="68.0552%" y="421" width="0.0281%" height="15" fill="rgb(210,80,43)" fg:x="2418" fg:w="1"/><text x="68.3052%" y="431.50"></text></g><g><title>__drain_all_pages (1 samples, 0.03%)</title><rect x="68.0833%" y="277" width="0.0281%" height="15" fill="rgb(247,160,36)" fg:x="2419" fg:w="1"/><text x="68.3333%" y="287.50"></text></g><g><title>drain_pages_zone (1 samples, 0.03%)</title><rect x="68.0833%" y="261" width="0.0281%" height="15" fill="rgb(234,13,49)" fg:x="2419" fg:w="1"/><text x="68.3333%" y="271.50"></text></g><g><title>free_pcppages_bulk (1 samples, 0.03%)</title><rect x="68.0833%" y="245" width="0.0281%" height="15" fill="rgb(234,122,0)" fg:x="2419" fg:w="1"/><text x="68.3333%" y="255.50"></text></g><g><title>__free_one_page (1 samples, 0.03%)</title><rect x="68.0833%" y="229" width="0.0281%" height="15" fill="rgb(207,146,38)" fg:x="2419" fg:w="1"/><text x="68.3333%" y="239.50"></text></g><g><title>tcg_out_qemu_ld (4 samples, 0.11%)</title><rect x="68.0552%" y="453" width="0.1126%" height="15" fill="rgb(207,177,25)" fg:x="2418" fg:w="4"/><text x="68.3052%" y="463.50"></text></g><g><title>tcg_out8 (3 samples, 0.08%)</title><rect x="68.0833%" y="437" width="0.0844%" height="15" fill="rgb(211,178,42)" fg:x="2419" fg:w="3"/><text x="68.3333%" y="447.50"></text></g><g><title>asm_exc_page_fault (3 samples, 0.08%)</title><rect x="68.0833%" y="421" width="0.0844%" height="15" fill="rgb(230,69,54)" fg:x="2419" fg:w="3"/><text x="68.3333%" y="431.50"></text></g><g><title>exc_page_fault (3 samples, 0.08%)</title><rect x="68.0833%" y="405" width="0.0844%" height="15" fill="rgb(214,135,41)" fg:x="2419" fg:w="3"/><text x="68.3333%" y="415.50"></text></g><g><title>do_user_addr_fault (3 samples, 0.08%)</title><rect x="68.0833%" y="389" width="0.0844%" height="15" fill="rgb(237,67,25)" fg:x="2419" fg:w="3"/><text x="68.3333%" y="399.50"></text></g><g><title>handle_mm_fault (3 samples, 0.08%)</title><rect x="68.0833%" y="373" width="0.0844%" height="15" fill="rgb(222,189,50)" fg:x="2419" fg:w="3"/><text x="68.3333%" y="383.50"></text></g><g><title>__handle_mm_fault (3 samples, 0.08%)</title><rect x="68.0833%" y="357" width="0.0844%" height="15" fill="rgb(245,148,34)" fg:x="2419" fg:w="3"/><text x="68.3333%" y="367.50"></text></g><g><title>do_huge_pmd_anonymous_page (3 samples, 0.08%)</title><rect x="68.0833%" y="341" width="0.0844%" height="15" fill="rgb(222,29,6)" fg:x="2419" fg:w="3"/><text x="68.3333%" y="351.50"></text></g><g><title>__folio_alloc (3 samples, 0.08%)</title><rect x="68.0833%" y="325" width="0.0844%" height="15" fill="rgb(221,189,43)" fg:x="2419" fg:w="3"/><text x="68.3333%" y="335.50"></text></g><g><title>__alloc_pages (3 samples, 0.08%)</title><rect x="68.0833%" y="309" width="0.0844%" height="15" fill="rgb(207,36,27)" fg:x="2419" fg:w="3"/><text x="68.3333%" y="319.50"></text></g><g><title>__alloc_pages_slowpath.constprop.0 (3 samples, 0.08%)</title><rect x="68.0833%" y="293" width="0.0844%" height="15" fill="rgb(217,90,24)" fg:x="2419" fg:w="3"/><text x="68.3333%" y="303.50"></text></g><g><title>try_to_free_pages (2 samples, 0.06%)</title><rect x="68.1115%" y="277" width="0.0563%" height="15" fill="rgb(224,66,35)" fg:x="2420" fg:w="2"/><text x="68.3615%" y="287.50"></text></g><g><title>do_try_to_free_pages (2 samples, 0.06%)</title><rect x="68.1115%" y="261" width="0.0563%" height="15" fill="rgb(221,13,50)" fg:x="2420" fg:w="2"/><text x="68.3615%" y="271.50"></text></g><g><title>shrink_node (2 samples, 0.06%)</title><rect x="68.1115%" y="245" width="0.0563%" height="15" fill="rgb(236,68,49)" fg:x="2420" fg:w="2"/><text x="68.3615%" y="255.50"></text></g><g><title>shrink_slab (2 samples, 0.06%)</title><rect x="68.1115%" y="229" width="0.0563%" height="15" fill="rgb(229,146,28)" fg:x="2420" fg:w="2"/><text x="68.3615%" y="239.50"></text></g><g><title>do_shrink_slab (1 samples, 0.03%)</title><rect x="68.1396%" y="213" width="0.0281%" height="15" fill="rgb(225,31,38)" fg:x="2421" fg:w="1"/><text x="68.3896%" y="223.50"></text></g><g><title>super_cache_scan (1 samples, 0.03%)</title><rect x="68.1396%" y="197" width="0.0281%" height="15" fill="rgb(250,208,3)" fg:x="2421" fg:w="1"/><text x="68.3896%" y="207.50"></text></g><g><title>prune_dcache_sb (1 samples, 0.03%)</title><rect x="68.1396%" y="181" width="0.0281%" height="15" fill="rgb(246,54,23)" fg:x="2421" fg:w="1"/><text x="68.3896%" y="191.50"></text></g><g><title>shrink_dentry_list (1 samples, 0.03%)</title><rect x="68.1396%" y="165" width="0.0281%" height="15" fill="rgb(243,76,11)" fg:x="2421" fg:w="1"/><text x="68.3896%" y="175.50"></text></g><g><title>tcg_out_sib_offset (1 samples, 0.03%)</title><rect x="68.1677%" y="453" width="0.0281%" height="15" fill="rgb(245,21,50)" fg:x="2422" fg:w="1"/><text x="68.4177%" y="463.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.03%)</title><rect x="68.1677%" y="437" width="0.0281%" height="15" fill="rgb(228,9,43)" fg:x="2422" fg:w="1"/><text x="68.4177%" y="447.50"></text></g><g><title>exc_page_fault (1 samples, 0.03%)</title><rect x="68.1677%" y="421" width="0.0281%" height="15" fill="rgb(208,100,47)" fg:x="2422" fg:w="1"/><text x="68.4177%" y="431.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="68.1677%" y="405" width="0.0281%" height="15" fill="rgb(232,26,8)" fg:x="2422" fg:w="1"/><text x="68.4177%" y="415.50"></text></g><g><title>handle_mm_fault (1 samples, 0.03%)</title><rect x="68.1677%" y="389" width="0.0281%" height="15" fill="rgb(216,166,38)" fg:x="2422" fg:w="1"/><text x="68.4177%" y="399.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.03%)</title><rect x="68.1677%" y="373" width="0.0281%" height="15" fill="rgb(251,202,51)" fg:x="2422" fg:w="1"/><text x="68.4177%" y="383.50"></text></g><g><title>vma_alloc_folio (1 samples, 0.03%)</title><rect x="68.1677%" y="357" width="0.0281%" height="15" fill="rgb(254,216,34)" fg:x="2422" fg:w="1"/><text x="68.4177%" y="367.50"></text></g><g><title>__folio_alloc (1 samples, 0.03%)</title><rect x="68.1677%" y="341" width="0.0281%" height="15" fill="rgb(251,32,27)" fg:x="2422" fg:w="1"/><text x="68.4177%" y="351.50"></text></g><g><title>__alloc_pages (1 samples, 0.03%)</title><rect x="68.1677%" y="325" width="0.0281%" height="15" fill="rgb(208,127,28)" fg:x="2422" fg:w="1"/><text x="68.4177%" y="335.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.03%)</title><rect x="68.1677%" y="309" width="0.0281%" height="15" fill="rgb(224,137,22)" fg:x="2422" fg:w="1"/><text x="68.4177%" y="319.50"></text></g><g><title>post_alloc_hook (1 samples, 0.03%)</title><rect x="68.1677%" y="293" width="0.0281%" height="15" fill="rgb(254,70,32)" fg:x="2422" fg:w="1"/><text x="68.4177%" y="303.50"></text></g><g><title>clear_page_erms (1 samples, 0.03%)</title><rect x="68.1677%" y="277" width="0.0281%" height="15" fill="rgb(229,75,37)" fg:x="2422" fg:w="1"/><text x="68.4177%" y="287.50"></text></g><g><title>cpu_exec (20 samples, 0.56%)</title><rect x="67.6611%" y="517" width="0.5629%" height="15" fill="rgb(252,64,23)" fg:x="2404" fg:w="20"/><text x="67.9111%" y="527.50"></text></g><g><title>tb_gen_code (18 samples, 0.51%)</title><rect x="67.7174%" y="501" width="0.5066%" height="15" fill="rgb(232,162,48)" fg:x="2406" fg:w="18"/><text x="67.9674%" y="511.50"></text></g><g><title>tcg_gen_code (15 samples, 0.42%)</title><rect x="67.8019%" y="485" width="0.4222%" height="15" fill="rgb(246,160,12)" fg:x="2409" fg:w="15"/><text x="68.0519%" y="495.50"></text></g><g><title>tcg_reg_alloc_op (8 samples, 0.23%)</title><rect x="67.9989%" y="469" width="0.2252%" height="15" fill="rgb(247,166,0)" fg:x="2416" fg:w="8"/><text x="68.2489%" y="479.50"></text></g><g><title>tcg_reg_alloc_cbranch (1 samples, 0.03%)</title><rect x="68.1959%" y="453" width="0.0281%" height="15" fill="rgb(249,219,21)" fg:x="2423" fg:w="1"/><text x="68.4459%" y="463.50"></text></g><g><title>cpu_loop (21 samples, 0.59%)</title><rect x="67.6611%" y="533" width="0.5910%" height="15" fill="rgb(205,209,3)" fg:x="2404" fg:w="21"/><text x="67.9111%" y="543.50"></text></g><g><title>do_syscall (1 samples, 0.03%)</title><rect x="68.2240%" y="517" width="0.0281%" height="15" fill="rgb(243,44,1)" fg:x="2424" fg:w="1"/><text x="68.4740%" y="527.50"></text></g><g><title>do_syscall1 (1 samples, 0.03%)</title><rect x="68.2240%" y="501" width="0.0281%" height="15" fill="rgb(206,159,16)" fg:x="2424" fg:w="1"/><text x="68.4740%" y="511.50"></text></g><g><title>qemu_plugin_user_exit (1 samples, 0.03%)</title><rect x="68.2240%" y="485" width="0.0281%" height="15" fill="rgb(244,77,30)" fg:x="2424" fg:w="1"/><text x="68.4740%" y="495.50"></text></g><g><title>do_tb_flush (1 samples, 0.03%)</title><rect x="68.2240%" y="469" width="0.0281%" height="15" fill="rgb(218,69,12)" fg:x="2424" fg:w="1"/><text x="68.4740%" y="479.50"></text></g><g><title>do_tb_flush (1 samples, 0.03%)</title><rect x="68.2240%" y="453" width="0.0281%" height="15" fill="rgb(212,87,7)" fg:x="2424" fg:w="1"/><text x="68.4740%" y="463.50"></text></g><g><title>qht_reset_size (1 samples, 0.03%)</title><rect x="68.2240%" y="437" width="0.0281%" height="15" fill="rgb(245,114,25)" fg:x="2424" fg:w="1"/><text x="68.4740%" y="447.50"></text></g><g><title>qht_do_resize_and_reset (1 samples, 0.03%)</title><rect x="68.2240%" y="421" width="0.0281%" height="15" fill="rgb(210,61,42)" fg:x="2424" fg:w="1"/><text x="68.4740%" y="431.50"></text></g><g><title>qht_do_resize_reset (1 samples, 0.03%)</title><rect x="68.2240%" y="405" width="0.0281%" height="15" fill="rgb(211,52,33)" fg:x="2424" fg:w="1"/><text x="68.4740%" y="415.50"></text></g><g><title>qht_map_reset__all_locked (1 samples, 0.03%)</title><rect x="68.2240%" y="389" width="0.0281%" height="15" fill="rgb(234,58,33)" fg:x="2424" fg:w="1"/><text x="68.4740%" y="399.50"></text></g><g><title>qht_bucket_reset__locked (1 samples, 0.03%)</title><rect x="68.2240%" y="373" width="0.0281%" height="15" fill="rgb(220,115,36)" fg:x="2424" fg:w="1"/><text x="68.4740%" y="383.50"></text></g><g><title>__libc_start_main_alias_2 (22 samples, 0.62%)</title><rect x="67.6611%" y="581" width="0.6192%" height="15" fill="rgb(243,153,54)" fg:x="2404" fg:w="22"/><text x="67.9111%" y="591.50"></text></g><g><title>__libc_start_call_main (22 samples, 0.62%)</title><rect x="67.6611%" y="565" width="0.6192%" height="15" fill="rgb(251,47,18)" fg:x="2404" fg:w="22"/><text x="67.9111%" y="575.50"></text></g><g><title>main (22 samples, 0.62%)</title><rect x="67.6611%" y="549" width="0.6192%" height="15" fill="rgb(242,102,42)" fg:x="2404" fg:w="22"/><text x="67.9111%" y="559.50"></text></g><g><title>loader_exec (1 samples, 0.03%)</title><rect x="68.2522%" y="533" width="0.0281%" height="15" fill="rgb(234,31,38)" fg:x="2425" fg:w="1"/><text x="68.5022%" y="543.50"></text></g><g><title>load_elf_binary (1 samples, 0.03%)</title><rect x="68.2522%" y="517" width="0.0281%" height="15" fill="rgb(221,117,51)" fg:x="2425" fg:w="1"/><text x="68.5022%" y="527.50"></text></g><g><title>load_elf_image (1 samples, 0.03%)</title><rect x="68.2522%" y="501" width="0.0281%" height="15" fill="rgb(212,20,18)" fg:x="2425" fg:w="1"/><text x="68.5022%" y="511.50"></text></g><g><title>target_mmap (1 samples, 0.03%)</title><rect x="68.2522%" y="485" width="0.0281%" height="15" fill="rgb(245,133,36)" fg:x="2425" fg:w="1"/><text x="68.5022%" y="495.50"></text></g><g><title>cannoli_mmap64 (1 samples, 0.03%)</title><rect x="68.2522%" y="469" width="0.0281%" height="15" fill="rgb(212,6,19)" fg:x="2425" fg:w="1"/><text x="68.5022%" y="479.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.03%)</title><rect x="68.2522%" y="453" width="0.0281%" height="15" fill="rgb(218,1,36)" fg:x="2425" fg:w="1"/><text x="68.5022%" y="463.50"></text></g><g><title>_start (23 samples, 0.65%)</title><rect x="67.6611%" y="597" width="0.6473%" height="15" fill="rgb(246,84,54)" fg:x="2404" fg:w="23"/><text x="67.9111%" y="607.50"></text></g><g><title>_dl_start (1 samples, 0.03%)</title><rect x="68.2803%" y="581" width="0.0281%" height="15" fill="rgb(242,110,6)" fg:x="2426" fg:w="1"/><text x="68.5303%" y="591.50"></text></g><g><title>_dl_start_final (1 samples, 0.03%)</title><rect x="68.2803%" y="565" width="0.0281%" height="15" fill="rgb(214,47,5)" fg:x="2426" fg:w="1"/><text x="68.5303%" y="575.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.03%)</title><rect x="68.2803%" y="549" width="0.0281%" height="15" fill="rgb(218,159,25)" fg:x="2426" fg:w="1"/><text x="68.5303%" y="559.50"></text></g><g><title>dl_main (1 samples, 0.03%)</title><rect x="68.2803%" y="533" width="0.0281%" height="15" fill="rgb(215,211,28)" fg:x="2426" fg:w="1"/><text x="68.5303%" y="543.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.03%)</title><rect x="68.2803%" y="517" width="0.0281%" height="15" fill="rgb(238,59,32)" fg:x="2426" fg:w="1"/><text x="68.5303%" y="527.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.03%)</title><rect x="68.2803%" y="501" width="0.0281%" height="15" fill="rgb(226,82,3)" fg:x="2426" fg:w="1"/><text x="68.5303%" y="511.50"></text></g><g><title>exc_page_fault (1 samples, 0.03%)</title><rect x="68.2803%" y="485" width="0.0281%" height="15" fill="rgb(240,164,32)" fg:x="2426" fg:w="1"/><text x="68.5303%" y="495.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="68.2803%" y="469" width="0.0281%" height="15" fill="rgb(232,46,7)" fg:x="2426" fg:w="1"/><text x="68.5303%" y="479.50"></text></g><g><title>handle_mm_fault (1 samples, 0.03%)</title><rect x="68.2803%" y="453" width="0.0281%" height="15" fill="rgb(229,129,53)" fg:x="2426" fg:w="1"/><text x="68.5303%" y="463.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.03%)</title><rect x="68.2803%" y="437" width="0.0281%" height="15" fill="rgb(234,188,29)" fg:x="2426" fg:w="1"/><text x="68.5303%" y="447.50"></text></g><g><title>wp_page_copy (1 samples, 0.03%)</title><rect x="68.2803%" y="421" width="0.0281%" height="15" fill="rgb(246,141,4)" fg:x="2426" fg:w="1"/><text x="68.5303%" y="431.50"></text></g><g><title>copy_page (1 samples, 0.03%)</title><rect x="68.2803%" y="405" width="0.0281%" height="15" fill="rgb(229,23,39)" fg:x="2426" fg:w="1"/><text x="68.5303%" y="415.50"></text></g><g><title>__do_fault (1 samples, 0.03%)</title><rect x="68.3085%" y="501" width="0.0281%" height="15" fill="rgb(206,12,3)" fg:x="2427" fg:w="1"/><text x="68.5585%" y="511.50"></text></g><g><title>shmem_fault (1 samples, 0.03%)</title><rect x="68.3085%" y="485" width="0.0281%" height="15" fill="rgb(252,226,20)" fg:x="2427" fg:w="1"/><text x="68.5585%" y="495.50"></text></g><g><title>shmem_getpage_gfp (1 samples, 0.03%)</title><rect x="68.3085%" y="469" width="0.0281%" height="15" fill="rgb(216,123,35)" fg:x="2427" fg:w="1"/><text x="68.5585%" y="479.50"></text></g><g><title>_raw_spin_unlock_irq (1 samples, 0.03%)</title><rect x="68.3085%" y="453" width="0.0281%" height="15" fill="rgb(212,68,40)" fg:x="2427" fg:w="1"/><text x="68.5585%" y="463.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.06%)</title><rect x="68.3085%" y="533" width="0.0563%" height="15" fill="rgb(254,125,32)" fg:x="2427" fg:w="2"/><text x="68.5585%" y="543.50"></text></g><g><title>do_fault (2 samples, 0.06%)</title><rect x="68.3085%" y="517" width="0.0563%" height="15" fill="rgb(253,97,22)" fg:x="2427" fg:w="2"/><text x="68.5585%" y="527.50"></text></g><g><title>finish_fault (1 samples, 0.03%)</title><rect x="68.3366%" y="501" width="0.0281%" height="15" fill="rgb(241,101,14)" fg:x="2428" fg:w="1"/><text x="68.5866%" y="511.50"></text></g><g><title>do_set_pte (1 samples, 0.03%)</title><rect x="68.3366%" y="485" width="0.0281%" height="15" fill="rgb(238,103,29)" fg:x="2428" fg:w="1"/><text x="68.5866%" y="495.50"></text></g><g><title>page_add_file_rmap (1 samples, 0.03%)</title><rect x="68.3366%" y="469" width="0.0281%" height="15" fill="rgb(233,195,47)" fg:x="2428" fg:w="1"/><text x="68.5866%" y="479.50"></text></g><g><title>folio_memcg_lock.part.0 (1 samples, 0.03%)</title><rect x="68.3366%" y="453" width="0.0281%" height="15" fill="rgb(246,218,30)" fg:x="2428" fg:w="1"/><text x="68.5866%" y="463.50"></text></g><g><title>asm_exc_page_fault (3 samples, 0.08%)</title><rect x="68.3085%" y="597" width="0.0844%" height="15" fill="rgb(219,145,47)" fg:x="2427" fg:w="3"/><text x="68.5585%" y="607.50"></text></g><g><title>exc_page_fault (3 samples, 0.08%)</title><rect x="68.3085%" y="581" width="0.0844%" height="15" fill="rgb(243,12,26)" fg:x="2427" fg:w="3"/><text x="68.5585%" y="591.50"></text></g><g><title>do_user_addr_fault (3 samples, 0.08%)</title><rect x="68.3085%" y="565" width="0.0844%" height="15" fill="rgb(214,87,16)" fg:x="2427" fg:w="3"/><text x="68.5585%" y="575.50"></text></g><g><title>handle_mm_fault (3 samples, 0.08%)</title><rect x="68.3085%" y="549" width="0.0844%" height="15" fill="rgb(208,99,42)" fg:x="2427" fg:w="3"/><text x="68.5585%" y="559.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.03%)</title><rect x="68.3648%" y="533" width="0.0281%" height="15" fill="rgb(253,99,2)" fg:x="2429" fg:w="1"/><text x="68.6148%" y="543.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="68.3929%" y="597" width="0.0281%" height="15" fill="rgb(220,168,23)" fg:x="2430" fg:w="1"/><text x="68.6429%" y="607.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="68.3929%" y="581" width="0.0281%" height="15" fill="rgb(242,38,24)" fg:x="2430" fg:w="1"/><text x="68.6429%" y="591.50"></text></g><g><title>__irq_exit_rcu (1 samples, 0.03%)</title><rect x="68.3929%" y="565" width="0.0281%" height="15" fill="rgb(225,182,9)" fg:x="2430" fg:w="1"/><text x="68.6429%" y="575.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="68.3929%" y="549" width="0.0281%" height="15" fill="rgb(243,178,37)" fg:x="2430" fg:w="1"/><text x="68.6429%" y="559.50"></text></g><g><title>rcu_core (1 samples, 0.03%)</title><rect x="68.3929%" y="533" width="0.0281%" height="15" fill="rgb(232,139,19)" fg:x="2430" fg:w="1"/><text x="68.6429%" y="543.50"></text></g><g><title>note_gp_changes (1 samples, 0.03%)</title><rect x="68.3929%" y="517" width="0.0281%" height="15" fill="rgb(225,201,24)" fg:x="2430" fg:w="1"/><text x="68.6429%" y="527.50"></text></g><g><title>check_for_breakpoints (1 samples, 0.03%)</title><rect x="68.4211%" y="597" width="0.0281%" height="15" fill="rgb(221,47,46)" fg:x="2431" fg:w="1"/><text x="68.6711%" y="607.50"></text></g><g><title>gen_ldst_modrm (1 samples, 0.03%)</title><rect x="68.4492%" y="597" width="0.0281%" height="15" fill="rgb(249,23,13)" fg:x="2432" fg:w="1"/><text x="68.6992%" y="607.50"></text></g><g><title>cpu_get_tb_cpu_state (2 samples, 0.06%)</title><rect x="68.4773%" y="581" width="0.0563%" height="15" fill="rgb(219,9,5)" fg:x="2433" fg:w="2"/><text x="68.7273%" y="591.50"></text></g><g><title>helper_lookup_tb_ptr (3 samples, 0.08%)</title><rect x="68.4773%" y="597" width="0.0844%" height="15" fill="rgb(254,171,16)" fg:x="2433" fg:w="3"/><text x="68.7273%" y="607.50"></text></g><g><title>tb_lookup (1 samples, 0.03%)</title><rect x="68.5336%" y="581" width="0.0281%" height="15" fill="rgb(230,171,20)" fg:x="2435" fg:w="1"/><text x="68.7836%" y="591.50"></text></g><g><title>tb_htable_lookup (1 samples, 0.03%)</title><rect x="68.5336%" y="565" width="0.0281%" height="15" fill="rgb(210,71,41)" fg:x="2435" fg:w="1"/><text x="68.7836%" y="575.50"></text></g><g><title>qht_lookup_custom (1 samples, 0.03%)</title><rect x="68.5336%" y="549" width="0.0281%" height="15" fill="rgb(206,173,20)" fg:x="2435" fg:w="1"/><text x="68.7836%" y="559.50"></text></g><g><title>seqlock_read_begin (1 samples, 0.03%)</title><rect x="68.5336%" y="533" width="0.0281%" height="15" fill="rgb(233,88,34)" fg:x="2435" fg:w="1"/><text x="68.7836%" y="543.50"></text></g><g><title>helper_syscall (1 samples, 0.03%)</title><rect x="68.5618%" y="597" width="0.0281%" height="15" fill="rgb(223,209,46)" fg:x="2436" fg:w="1"/><text x="68.8118%" y="607.50"></text></g><g><title>cpu_loop_exit (1 samples, 0.03%)</title><rect x="68.5618%" y="581" width="0.0281%" height="15" fill="rgb(250,43,18)" fg:x="2436" fg:w="1"/><text x="68.8118%" y="591.50"></text></g><g><title>jit_exit64 (1 samples, 0.03%)</title><rect x="68.5618%" y="565" width="0.0281%" height="15" fill="rgb(208,13,10)" fg:x="2436" fg:w="1"/><text x="68.8118%" y="575.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.03%)</title><rect x="68.5618%" y="549" width="0.0281%" height="15" fill="rgb(212,200,36)" fg:x="2436" fg:w="1"/><text x="68.8118%" y="559.50"></text></g><g><title>__GI_gettid (1 samples, 0.03%)</title><rect x="68.5618%" y="533" width="0.0281%" height="15" fill="rgb(225,90,30)" fg:x="2436" fg:w="1"/><text x="68.8118%" y="543.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="68.5618%" y="517" width="0.0281%" height="15" fill="rgb(236,182,39)" fg:x="2436" fg:w="1"/><text x="68.8118%" y="527.50"></text></g><g><title>do_syscall_64 (1 samples, 0.03%)</title><rect x="68.5618%" y="501" width="0.0281%" height="15" fill="rgb(212,144,35)" fg:x="2436" fg:w="1"/><text x="68.8118%" y="511.50"></text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.03%)</title><rect x="68.5618%" y="485" width="0.0281%" height="15" fill="rgb(228,63,44)" fg:x="2436" fg:w="1"/><text x="68.8118%" y="495.50"></text></g><g><title>jit_entry64 (61 samples, 1.72%)</title><rect x="68.5899%" y="597" width="1.7169%" height="15" fill="rgb(228,109,6)" fg:x="2437" fg:w="61"/><text x="68.8399%" y="607.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (61 samples, 1.72%)</title><rect x="68.5899%" y="581" width="1.7169%" height="15" fill="rgb(238,117,24)" fg:x="2437" fg:w="61"/><text x="68.8399%" y="591.50"></text></g><g><title>__GI_gettid (2 samples, 0.06%)</title><rect x="70.2505%" y="565" width="0.0563%" height="15" fill="rgb(242,26,26)" fg:x="2496" fg:w="2"/><text x="70.5005%" y="575.50"></text></g><g><title>syscall_return_via_sysret (2 samples, 0.06%)</title><rect x="70.2505%" y="549" width="0.0563%" height="15" fill="rgb(221,92,48)" fg:x="2496" fg:w="2"/><text x="70.5005%" y="559.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="99.6623%" y="533" width="0.0281%" height="15" fill="rgb(209,209,32)" fg:x="3541" fg:w="1"/><text x="99.9123%" y="543.50"></text></g><g><title>error_entry (1 samples, 0.03%)</title><rect x="99.6623%" y="517" width="0.0281%" height="15" fill="rgb(221,70,22)" fg:x="3541" fg:w="1"/><text x="99.9123%" y="527.50"></text></g><g><title>syscall_enter_from_user_mode (1 samples, 0.03%)</title><rect x="99.6904%" y="501" width="0.0281%" height="15" fill="rgb(248,145,5)" fg:x="3542" fg:w="1"/><text x="99.9404%" y="511.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.06%)</title><rect x="99.6904%" y="533" width="0.0563%" height="15" fill="rgb(226,116,26)" fg:x="3542" fg:w="2"/><text x="99.9404%" y="543.50"></text></g><g><title>do_syscall_64 (2 samples, 0.06%)</title><rect x="99.6904%" y="517" width="0.0563%" height="15" fill="rgb(244,5,17)" fg:x="3542" fg:w="2"/><text x="99.9404%" y="527.50"></text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.03%)</title><rect x="99.7185%" y="501" width="0.0281%" height="15" fill="rgb(252,159,33)" fg:x="3543" fg:w="1"/><text x="99.9685%" y="511.50"></text></g><g><title>__GI_gettid (5 samples, 0.14%)</title><rect x="99.6623%" y="549" width="0.1407%" height="15" fill="rgb(206,71,0)" fg:x="3541" fg:w="5"/><text x="99.9123%" y="559.50"></text></g><g><title>error_entry (2 samples, 0.06%)</title><rect x="99.7467%" y="533" width="0.0563%" height="15" fill="rgb(233,118,54)" fg:x="3544" fg:w="2"/><text x="99.9967%" y="543.50"></text></g><g><title>__irqentry_text_end (1 samples, 0.03%)</title><rect x="99.8030%" y="549" width="0.0281%" height="15" fill="rgb(234,83,48)" fg:x="3546" fg:w="1"/><text x="100.0530%" y="559.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.14%)</title><rect x="99.8311%" y="549" width="0.1407%" height="15" fill="rgb(228,3,54)" fg:x="3547" fg:w="5"/><text x="100.0811%" y="559.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.14%)</title><rect x="99.8311%" y="533" width="0.1407%" height="15" fill="rgb(226,155,13)" fg:x="3547" fg:w="5"/><text x="100.0811%" y="543.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.14%)</title><rect x="99.8311%" y="517" width="0.1407%" height="15" fill="rgb(241,28,37)" fg:x="3547" fg:w="5"/><text x="100.0811%" y="527.50"></text></g><g><title>schedule (5 samples, 0.14%)</title><rect x="99.8311%" y="501" width="0.1407%" height="15" fill="rgb(233,93,10)" fg:x="3547" fg:w="5"/><text x="100.0811%" y="511.50"></text></g><g><title>__schedule (5 samples, 0.14%)</title><rect x="99.8311%" y="485" width="0.1407%" height="15" fill="rgb(225,113,19)" fg:x="3547" fg:w="5"/><text x="100.0811%" y="495.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.14%)</title><rect x="99.8311%" y="469" width="0.1407%" height="15" fill="rgb(241,2,18)" fg:x="3547" fg:w="5"/><text x="100.0811%" y="479.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.14%)</title><rect x="99.8311%" y="453" width="0.1407%" height="15" fill="rgb(228,207,21)" fg:x="3547" fg:w="5"/><text x="100.0811%" y="463.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 0.14%)</title><rect x="99.8311%" y="437" width="0.1407%" height="15" fill="rgb(213,211,35)" fg:x="3547" fg:w="5"/><text x="100.0811%" y="447.50"></text></g><g><title>native_write_msr (5 samples, 0.14%)</title><rect x="99.8311%" y="421" width="0.1407%" height="15" fill="rgb(209,83,10)" fg:x="3547" fg:w="5"/><text x="100.0811%" y="431.50"></text></g><g><title>all (3,553 samples, 100%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(209,164,1)" fg:x="0" fg:w="3553"/><text x="0.2500%" y="639.50"></text></g><g><title>qemu-x86_64 (1,149 samples, 32.34%)</title><rect x="67.6611%" y="613" width="32.3389%" height="15" fill="rgb(213,184,43)" fg:x="2404" fg:w="1149"/><text x="67.9111%" y="623.50">qemu-x86_64</text></g><g><title>jitter::cannoli_internals::cannoli_flush_buffer64 (1,055 samples, 29.69%)</title><rect x="70.3068%" y="597" width="29.6932%" height="15" fill="rgb(231,61,34)" fg:x="2498" fg:w="1055"/><text x="70.5568%" y="607.50">jitter::cannoli_internals::cannoli_flush_buffer64</text></g><g><title>jit_entry64 (1,055 samples, 29.69%)</title><rect x="70.3068%" y="581" width="29.6932%" height="15" fill="rgb(235,75,3)" fg:x="2498" fg:w="1055"/><text x="70.5568%" y="591.50">jit_entry64</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,055 samples, 29.69%)</title><rect x="70.3068%" y="565" width="29.6932%" height="15" fill="rgb(220,106,47)" fg:x="2498" fg:w="1055"/><text x="70.5568%" y="575.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>error_entry (1 samples, 0.03%)</title><rect x="99.9719%" y="549" width="0.0281%" height="15" fill="rgb(210,196,33)" fg:x="3552" fg:w="1"/><text x="100.2219%" y="559.50"></text></g><g><title>sync_regs (1 samples, 0.03%)</title><rect x="99.9719%" y="533" width="0.0281%" height="15" fill="rgb(229,154,42)" fg:x="3552" fg:w="1"/><text x="100.2219%" y="543.50"></text></g></svg></svg>